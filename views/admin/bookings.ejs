<!-- Bookings Header -->
<div class="bookings-header">
    <div class="bookings-title">
        <h1>Manage Bookings</h1>
        <p class="subtitle">View and manage all your salon appointments</p>
    </div>
    <div class="bookings-actions">
        <div class="search-box">
            <i class="fas fa-search"></i>
            <input type="text" id="booking-search" placeholder="Search by customer, service, or notes...">
        </div>
        <div class="filters-group">
            <div class="date-filter">
                <i class="fas fa-calendar"></i>
                <input type="date" id="date-filter" class="form-control">
            </div>
            <div class="status-filter">
                <i class="fas fa-filter"></i>
                <select id="status-filter" class="form-control">
                    <option value="">All Statuses</option>
                    <option value="New">New</option>
                    <option value="Pending">Pending</option>
                    <option value="Confirmed">Confirmed</option>
                    <option value="Completed">Completed</option>
                    <option value="Cancelled">Cancelled</option>
                </select>
            </div>
            <div class="service-filter">
                <i class="fas fa-spa"></i>
                <select id="service-filter" class="form-control">
                    <option value="">All Services</option>
                    <% services && services.forEach(service => { %>
                        <option value="<%= service.name %>"><%= service.name %></option>
                    <% }); %>
                </select>
            </div>
            <div class="sort-dropdown">
                <i class="fas fa-sort"></i>
                <select id="sort-dropdown" class="form-control">
                    <option value="date-desc">Date (Newest)</option>
                    <option value="date-asc">Date (Oldest)</option>
                    <option value="status">Status</option>
                    <option value="customer">Customer</option>
                </select>
            </div>
        </div>
    </div>
    <div class="bookings-tools">
        <button class="btn btn-outline" id="export-btn" title="Export to CSV">
            <i class="fas fa-download"></i> Export
        </button>
        <button class="btn btn-primary" id="refresh-btn" title="Refresh bookings">
            <i class="fas fa-sync-alt"></i> Refresh
        </button>
    </div>
</div>

<!-- Stats Overview -->
<div class="stats-overview">
    <div class="stat-card">
        <div class="stat-icon" style="background: linear-gradient(135deg, #4CAF50, #2E7D32);">
            <i class="fas fa-calendar-check"></i>
        </div>
        <div class="stat-info">
            <h3>Total Bookings</h3>
            <p class="stat-value"><%= bookings.length %></p>
        </div>
    </div>
    <div class="stat-card">
        <div class="stat-icon" style="background: linear-gradient(135deg, #2196F3, #1976D2);">
            <i class="fas fa-clock"></i>
        </div>
        <div class="stat-info">
            <h3>Pending</h3>
            <p class="stat-value"><%= bookings.filter(b => b.status === 'Pending').length %></p>
        </div>
    </div>
    <div class="stat-card">
        <div class="stat-icon" style="background: linear-gradient(135deg, #FF9800, #F57C00);">
            <i class="fas fa-calendar-day"></i>
        </div>
        <div class="stat-info">
            <h3>Today's Bookings</h3>
            <p class="stat-value"><%= bookings.filter(b => new Date(b.date).toDateString() === new Date().toDateString()).length %></p>
        </div>
    </div>
    <div class="stat-card">
        <div class="stat-icon" style="background: linear-gradient(135deg, #9C27B0, #7B1FA2);">
            <i class="fas fa-chart-line"></i>
        </div>
        <div class="stat-info">
            <h3>This Week</h3>
            <p class="stat-value"><%= bookings.filter(b => {
                const bookingDate = new Date(b.date);
                const today = new Date();
                const weekStart = new Date(today.setDate(today.getDate() - today.getDay()));
                return bookingDate >= weekStart;
            }).length %></p>
        </div>
    </div>
</div>

<!-- Bulk Actions Bar -->
<div id="bulk-actions-bar" class="bulk-actions-bar" style="display:none;">
    <div class="bulk-info">
        <i class="fas fa-check-circle"></i>
        <span id="selected-count">0 selected</span>
    </div>
    <div class="bulk-actions">
        <button class="btn btn-danger" id="bulk-delete-btn">
            <i class="fas fa-trash"></i> Delete
        </button>
        <select id="bulk-status-select" class="form-control">
            <option value="">Change Status</option>
            <option value="New">New</option>
            <option value="Pending">Pending</option>
            <option value="Confirmed">Confirmed</option>
            <option value="Completed">Completed</option>
            <option value="Cancelled">Cancelled</option>
        </select>
        <button class="btn btn-secondary" id="bulk-status-btn">Apply</button>
    </div>
</div>

<!-- Bookings Grid -->
<div class="bookings-grid" id="bookings-grid">
    <% if (bookings.length === 0) { %>
        <div class="empty-state">
            <div class="empty-state-icon">
                <i class="fas fa-calendar-alt"></i>
            </div>
            <h3>No Bookings Found</h3>
            <p>Bookings will appear here when customers make appointments.</p>
            <button class="btn btn-primary" onclick="window.location.href='/admin/bookings/new'">
                <i class="fas fa-plus"></i> Create New Booking
            </button>
        </div>
    <% } else { %>
        <% bookings.forEach(booking => { %>
            <div class="booking-card" data-id="<%= booking._id %>">
                <div class="booking-header">
                    <div class="booking-status-wrapper">
                        <input type="checkbox" class="bulk-checkbox" data-id="<%= booking._id %>">
                        <div class="booking-status <%= booking.status.toLowerCase() %>">
                            <i class="fas fa-circle"></i>
                            <%= booking.status %>
                        </div>
                    </div>
                    <div class="booking-actions">
                        <button class="btn btn-icon view-booking-btn" 
                            data-id="<%= booking._id %>"
                            title="View Details">
                            <i class="fas fa-eye"></i>
                        </button>
                        <button class="btn btn-icon edit-booking-btn" 
                            data-id="<%= booking._id %>"
                            title="Edit Booking">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn btn-icon delete-btn" 
                            data-id="<%= booking._id %>" 
                            data-confirm="Are you sure you want to delete this booking?"
                            title="Delete Booking">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>

                <div class="booking-info">
                    <div class="booking-customer">
                        <i class="fas fa-user"></i>
                        <div class="customer-info">
                            <span class="customer-name"><%= booking.customer %></span>
                            <span class="customer-contact"><%= booking.phone || 'No phone' %></span>
                        </div>
                    </div>
                    <div class="booking-service">
                        <i class="fas fa-spa"></i>
                        <span><%= booking.service %></span>
                    </div>
                    <div class="booking-datetime">
                        <i class="fas fa-clock"></i>
                        <div class="datetime-info">
                            <span class="date"><%= new Date(booking.date).toLocaleDateString() %></span>
                            <span class="time"><%= booking.time %></span>
                        </div>
                    </div>
                    <% if (booking.notes) { %>
                        <div class="booking-notes">
                            <i class="fas fa-sticky-note"></i>
                            <span><%= booking.notes %></span>
                        </div>
                    <% } %>
                </div>
            </div>
        <% }); %>
    <% } %>
</div>

<!-- Booking Details Modal -->
<div id="booking-details-modal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2>Booking Details</h2>
            <button class="close-modal">&times;</button>
        </div>
        <div class="modal-body" id="booking-details">
            <!-- Content will be dynamically populated -->
        </div>
    </div>
</div>

<style>
    /* Modern Variables */
    :root {
        --primary-color: #9c8370;
        --primary-dark: #7c6b5d;
        --secondary-color: #d4a373;
        --success-color: #4CAF50;
        --warning-color: #FF9800;
        --danger-color: #f44336;
        --text-color: #2d3748;
        --text-light: #718096;
        --border-color: #e2e8f0;
        --bg-light: #f8fafc;
        --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
        --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
        --radius-sm: 0.375rem;
        --radius-md: 0.5rem;
        --radius-lg: 0.75rem;
        --transition: all 0.3s ease;
        --btn-gradient-primary: linear-gradient(135deg, var(--primary-color), var(--primary-dark));
        --btn-gradient-secondary: linear-gradient(135deg, var(--secondary-color), #bc6c25);
        --btn-gradient-danger: linear-gradient(135deg, #f87171, #dc2626);
        --btn-gradient-success: linear-gradient(135deg, #4ade80, #16a34a);
        --btn-gradient-warning: linear-gradient(135deg, #fbbf24, #d97706);
        --btn-gradient-info: linear-gradient(135deg, #60a5fa, #2563eb);
        --btn-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        --btn-shadow-hover: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        --btn-shadow-active: 0 2px 4px -1px rgba(0, 0, 0, 0.1), 0 1px 2px -1px rgba(0, 0, 0, 0.06);
        --btn-transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    /* Header Styles */
    .bookings-header {
        background: white;
        padding: 2rem;
        border-radius: var(--radius-lg);
        box-shadow: var(--shadow-md);
        margin-bottom: 2rem;
    }

    .bookings-title {
        margin-bottom: 1.5rem;
    }

    .bookings-title h1 {
        color: var(--text-color);
        font-size: 1.875rem;
        font-weight: 600;
        margin: 0;
    }

    .subtitle {
        color: var(--text-light);
        margin: 0.5rem 0 0;
    }

    .bookings-actions {
        display: flex;
        gap: 1rem;
        flex-wrap: wrap;
    }

    .search-box {
        position: relative;
        flex: 1;
        min-width: 300px;
    }

    .search-box i {
        position: absolute;
        left: 1rem;
        top: 50%;
        transform: translateY(-50%);
        color: var(--text-light);
    }

    .search-box input {
        width: 100%;
        padding: 0.75rem 1rem 0.75rem 2.5rem;
        border: 1px solid var(--border-color);
        border-radius: var(--radius-md);
        font-size: 0.875rem;
        transition: var(--transition);
    }

    .search-box input:focus {
        border-color: var(--primary-color);
        box-shadow: 0 0 0 3px rgba(156, 131, 112, 0.1);
        outline: none;
    }

    .filters-group {
        display: flex;
        gap: 1rem;
        flex-wrap: wrap;
    }

    .date-filter,
    .status-filter,
    .service-filter,
    .sort-dropdown {
        position: relative;
        min-width: 200px;
    }

    .date-filter i,
    .status-filter i,
    .service-filter i,
    .sort-dropdown i {
        position: absolute;
        left: 1rem;
        top: 50%;
        transform: translateY(-50%);
        color: var(--text-light);
    }

    .form-control {
        width: 100%;
        padding: 0.75rem 1rem 0.75rem 2.5rem;
        border: 1px solid var(--border-color);
        border-radius: var(--radius-md);
        font-size: 0.875rem;
        transition: var(--transition);
        background-color: white;
    }

    .form-control:focus {
        border-color: var(--primary-color);
        box-shadow: 0 0 0 3px rgba(156, 131, 112, 0.1);
        outline: none;
    }

    /* Stats Overview */
    .stats-overview {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
        gap: 1.5rem;
        margin-bottom: 2rem;
    }

    .stat-card {
        background: white;
        padding: 1.5rem;
        border-radius: var(--radius-lg);
        box-shadow: var(--shadow-md);
        display: flex;
        align-items: center;
        gap: 1rem;
        transition: var(--transition);
    }

    .stat-card:hover {
        transform: translateY(-2px);
        box-shadow: var(--shadow-lg);
    }

    .stat-icon {
        width: 48px;
        height: 48px;
        border-radius: var(--radius-md);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 1.25rem;
    }

    .stat-info h3 {
        color: var(--text-light);
        font-size: 0.875rem;
        margin: 0;
    }

    .stat-value {
        color: var(--text-color);
        font-size: 1.5rem;
        font-weight: 600;
        margin: 0.25rem 0 0;
    }

    /* Bulk Actions Bar */
    .bulk-actions-bar {
        background: white;
        padding: 1rem 1.5rem;
        border-radius: var(--radius-lg);
        box-shadow: var(--shadow-md);
        margin-bottom: 1.5rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .bulk-info {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        color: var(--text-color);
    }

    .bulk-info i {
        color: var(--success-color);
    }

    .bulk-actions {
        display: flex;
        gap: 1rem;
        align-items: center;
    }

    /* Bookings Grid */
    .bookings-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
        gap: 1.5rem;
    }

    .booking-card {
        background: white;
        border-radius: var(--radius-lg);
        overflow: hidden;
        box-shadow: var(--shadow-md);
        transition: var(--transition);
    }

    .booking-card:hover {
        transform: translateY(-4px);
        box-shadow: var(--shadow-lg);
    }

    .booking-header {
        padding: 1rem 1.5rem;
        background: var(--bg-light);
        border-bottom: 1px solid var(--border-color);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .booking-status-wrapper {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .booking-status {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 0.875rem;
        font-weight: 500;
        padding: 0.25rem 0.75rem;
        border-radius: 9999px;
    }

    .booking-status i {
        font-size: 0.5rem;
    }

    .booking-status.new {
        background: #e3f2fd;
        color: #1976d2;
    }

    .booking-status.pending {
        background: #fff3e0;
        color: #f57c00;
    }

    .booking-status.confirmed {
        background: #e8f5e9;
        color: #2e7d32;
    }

    .booking-status.completed {
        background: #e8eaf6;
        color: #3f51b5;
    }

    .booking-status.cancelled {
        background: #ffebee;
        color: #c62828;
    }

    .booking-actions {
        display: flex;
        gap: 0.5rem;
    }

    .btn-icon {
        width: 32px;
        height: 32px;
        padding: 0;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: var(--radius-md);
        background: white;
        border: 1px solid var(--border-color);
        color: var(--text-light);
        transition: var(--transition);
    }

    .btn-icon:hover {
        background: var(--bg-light);
        color: var(--text-color);
    }

    .booking-info {
        padding: 1.5rem;
    }

    .booking-customer,
    .booking-service,
    .booking-datetime,
    .booking-notes {
        display: flex;
        align-items: flex-start;
        gap: 0.75rem;
        margin-bottom: 1rem;
        color: var(--text-color);
    }

    .booking-customer i,
    .booking-service i,
    .booking-datetime i,
    .booking-notes i {
        color: var(--text-light);
        width: 1rem;
        margin-top: 0.25rem;
    }

    .customer-info {
        display: flex;
        flex-direction: column;
    }

    .customer-name {
        font-weight: 500;
    }

    .customer-contact {
        font-size: 0.875rem;
        color: var(--text-light);
    }

    .datetime-info {
        display: flex;
        flex-direction: column;
    }

    .date {
        font-weight: 500;
    }

    .time {
        font-size: 0.875rem;
        color: var(--text-light);
    }

    .booking-notes {
        font-size: 0.875rem;
        color: var(--text-light);
        background: var(--bg-light);
        padding: 0.75rem;
        border-radius: var(--radius-md);
    }

    /* Empty State */
    .empty-state {
        grid-column: 1 / -1;
        text-align: center;
        padding: 4rem 2rem;
        background: white;
        border-radius: var(--radius-lg);
        box-shadow: var(--shadow-md);
    }

    .empty-state-icon {
        width: 64px;
        height: 64px;
        background: var(--bg-light);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 1.5rem;
        color: var(--text-light);
        font-size: 1.5rem;
    }

    .empty-state h3 {
        color: var(--text-color);
        margin: 0 0 0.5rem;
    }

    .empty-state p {
        color: var(--text-light);
        margin: 0 0 1.5rem;
    }

    /* Modal Styles */
    .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        z-index: 1000;
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .modal.show {
        opacity: 1;
    }

    .modal-content {
        position: relative;
        width: 90%;
        max-width: 600px;
        margin: 2rem auto;
        background: white;
        border-radius: var(--radius-lg);
        box-shadow: var(--shadow-lg);
        transform: translateY(-20px);
        transition: transform 0.3s ease;
    }

    .modal.show .modal-content {
        transform: translateY(0);
    }

    .modal-header {
        padding: 1.5rem;
        border-bottom: 1px solid var(--border-color);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .modal-header h2 {
        margin: 0;
        color: var(--text-color);
    }

    .close-modal {
        background: none;
        border: none;
        font-size: 1.5rem;
        color: var(--text-light);
        cursor: pointer;
        padding: 0.5rem;
        line-height: 1;
    }

    .modal-body {
        padding: 1.5rem;
    }

    /* Responsive Design */
    @media (max-width: 1024px) {
        .bookings-header {
            padding: 1.5rem;
        }

        .filters-group {
            flex-direction: column;
            width: 100%;
        }

        .date-filter,
        .status-filter,
        .service-filter,
        .sort-dropdown {
            width: 100%;
        }
    }

    @media (max-width: 768px) {
        .bookings-grid {
            grid-template-columns: 1fr;
        }

        .stats-overview {
            grid-template-columns: 1fr;
        }

        .bulk-actions-bar {
            flex-direction: column;
            gap: 1rem;
        }

        .bulk-actions {
            width: 100%;
            flex-wrap: wrap;
        }

        .bulk-actions select,
        .bulk-actions button {
            width: 100%;
        }
    }

    /* Button Base Styles */
    .btn {
        position: relative;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
        padding: 0.75rem 1.5rem;
        font-size: 0.875rem;
        font-weight: 500;
        border-radius: var(--radius-md);
        border: none;
        cursor: pointer;
        transition: var(--btn-transition);
        overflow: hidden;
        text-decoration: none;
        white-space: nowrap;
    }

    .btn::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(rgba(255, 255, 255, 0.1), rgba(255, 255, 255, 0));
        opacity: 0;
        transition: var(--btn-transition);
    }

    .btn:hover::before {
        opacity: 1;
    }

    .btn:active {
        transform: translateY(1px);
    }

    /* Primary Button */
    .btn-primary {
        background: var(--btn-gradient-primary);
        color: white;
        box-shadow: var(--btn-shadow);
    }

    .btn-primary:hover {
        box-shadow: var(--btn-shadow-hover);
        transform: translateY(-2px);
    }

    .btn-primary:active {
        box-shadow: var(--btn-shadow-active);
    }

    /* Secondary Button */
    .btn-secondary {
        background: var(--btn-gradient-secondary);
        color: white;
        box-shadow: var(--btn-shadow);
    }

    .btn-secondary:hover {
        box-shadow: var(--btn-shadow-hover);
        transform: translateY(-2px);
    }

    .btn-secondary:active {
        box-shadow: var(--btn-shadow-active);
    }

    /* Danger Button */
    .btn-danger {
        background: var(--btn-gradient-danger);
        color: white;
        box-shadow: var(--btn-shadow);
    }

    .btn-danger:hover {
        box-shadow: var(--btn-shadow-hover);
        transform: translateY(-2px);
    }

    .btn-danger:active {
        box-shadow: var(--btn-shadow-active);
    }

    /* Outline Button */
    .btn-outline {
        background: transparent;
        border: 2px solid var(--primary-color);
        color: var(--primary-color);
        box-shadow: none;
    }

    .btn-outline:hover {
        background: var(--primary-color);
        color: white;
        box-shadow: var(--btn-shadow);
        transform: translateY(-2px);
    }

    .btn-outline:active {
        box-shadow: var(--btn-shadow-active);
    }

    /* Icon Button */
    .btn-icon {
        width: 40px;
        height: 40px;
        padding: 0;
        border-radius: var(--radius-md);
        background: white;
        border: 1px solid var(--border-color);
        color: var(--text-light);
        box-shadow: var(--shadow-sm);
        transition: var(--btn-transition);
    }

    .btn-icon:hover {
        background: var(--bg-light);
        color: var(--text-color);
        box-shadow: var(--shadow-md);
        transform: translateY(-2px);
    }

    .btn-icon:active {
        box-shadow: var(--shadow-sm);
        transform: translateY(0);
    }

    /* Loading State */
    .btn.loading {
        position: relative;
        pointer-events: none;
        opacity: 0.8;
    }

    .btn.loading::after {
        content: '';
        position: absolute;
        width: 1rem;
        height: 1rem;
        border: 2px solid rgba(255, 255, 255, 0.3);
        border-radius: 50%;
        border-top-color: white;
        animation: spin 0.8s linear infinite;
    }

    @keyframes spin {
        to {
            transform: rotate(360deg);
        }
    }

    /* Button Group */
    .btn-group {
        display: flex;
        gap: 0.5rem;
    }

    /* Enhanced Card Animations */
    .booking-card {
        animation: fadeIn 0.5s ease-out;
        transition: var(--btn-transition);
    }

    .booking-card:hover {
        transform: translateY(-4px) scale(1.02);
        box-shadow: var(--shadow-lg);
    }

    @keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(10px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    /* Enhanced Status Badge Animations */
    .booking-status {
        animation: pulse 2s infinite;
    }

    @keyframes pulse {
        0% {
            box-shadow: 0 0 0 0 rgba(var(--primary-color-rgb), 0.4);
        }
        70% {
            box-shadow: 0 0 0 6px rgba(var(--primary-color-rgb), 0);
        }
        100% {
            box-shadow: 0 0 0 0 rgba(var(--primary-color-rgb), 0);
        }
    }

    /* Enhanced Modal Animations */
    .modal-content {
        animation: modalSlideIn 0.3s ease-out;
    }

    @keyframes modalSlideIn {
        from {
            opacity: 0;
            transform: translateY(-20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    /* Enhanced Filter Animations */
    .form-control:focus {
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    /* Enhanced Stats Card Animations */
    .stat-card {
        animation: slideIn 0.5s ease-out;
    }

    @keyframes slideIn {
        from {
            opacity: 0;
            transform: translateX(-20px);
        }
        to {
            opacity: 1;
            transform: translateX(0);
        }
    }

    /* Enhanced Bulk Actions Bar */
    .bulk-actions-bar {
        animation: slideDown 0.3s ease-out;
    }

    @keyframes slideDown {
        from {
            opacity: 0;
            transform: translateY(-10px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    /* Responsive Enhancements */
    @media (max-width: 768px) {
        .btn {
            padding: 0.625rem 1.25rem;
            font-size: 0.8125rem;
        }

        .btn-icon {
            width: 36px;
            height: 36px;
        }

        .btn-group {
            flex-wrap: wrap;
        }

        .btn-group .btn {
            flex: 1;
            min-width: 120px;
        }
    }

    /* Touch Device Optimizations */
    @media (hover: none) {
        .btn:hover {
            transform: none;
        }

        .btn:active {
            transform: scale(0.98);
        }

        .booking-card:hover {
            transform: none;
        }

        .btn-icon:hover {
            transform: none;
        }
    }

    /* Loading Spinner Animation */
    @keyframes spin {
        to {
            transform: rotate(360deg);
        }
    }

    .loading-spinner {
        display: inline-block;
        width: 1rem;
        height: 1rem;
        border: 2px solid rgba(255, 255, 255, 0.3);
        border-radius: 50%;
        border-top-color: white;
        animation: spin 0.8s linear infinite;
    }

    /* Enhanced Focus States */
    .btn:focus-visible,
    .btn-icon:focus-visible,
    .form-control:focus-visible {
        outline: 2px solid var(--primary-color);
        outline-offset: 2px;
    }

    /* Enhanced Active States */
    .btn:active,
    .btn-icon:active {
        transform: translateY(1px);
    }

    /* Enhanced Disabled States */
    .btn:disabled,
    .btn-icon:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        pointer-events: none;
    }

    /* Enhanced Hover Effects */
    .btn:hover .btn-icon,
    .btn-icon:hover {
        transform: translateY(-2px);
        box-shadow: var(--btn-shadow-hover);
    }

    /* Enhanced Transition Effects */
    .btn,
    .btn-icon,
    .form-control,
    .booking-card,
    .modal-content,
    .bulk-actions-bar {
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    /* Enhanced Shadow Effects */
    .btn,
    .btn-icon,
    .booking-card,
    .modal-content,
    .bulk-actions-bar {
        box-shadow: var(--shadow-md);
    }

    .btn:hover,
    .btn-icon:hover,
    .booking-card:hover {
        box-shadow: var(--shadow-lg);
    }

    /* Enhanced Color Transitions */
    .btn,
    .btn-icon,
    .form-control {
        transition: background-color 0.3s ease,
                    color 0.3s ease,
                    border-color 0.3s ease,
                    box-shadow 0.3s ease,
                    transform 0.3s ease;
    }

    /* Enhanced Focus Ring */
    .btn:focus,
    .btn-icon:focus,
    .form-control:focus {
        box-shadow: 0 0 0 3px rgba(var(--primary-color-rgb), 0.2);
    }

    /* Enhanced Active Ring */
    .btn:active,
    .btn-icon:active {
        box-shadow: 0 0 0 2px rgba(var(--primary-color-rgb), 0.3);
    }

    /* Enhanced Hover Ring */
    .btn:hover,
    .btn-icon:hover {
        box-shadow: 0 0 0 4px rgba(var(--primary-color-rgb), 0.1);
    }

    /* Enhanced Loading State */
    .btn.loading {
        position: relative;
        pointer-events: none;
    }

    .btn.loading::after {
        content: '';
        position: absolute;
        width: 1rem;
        height: 1rem;
        border: 2px solid rgba(255, 255, 255, 0.3);
        border-radius: 50%;
        border-top-color: white;
        animation: spin 0.8s linear infinite;
    }

    /* Enhanced Disabled State */
    .btn:disabled,
    .btn-icon:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        pointer-events: none;
        box-shadow: none;
    }

    /* Enhanced Active State */
    .btn:active,
    .btn-icon:active {
        transform: translateY(1px);
        box-shadow: var(--btn-shadow-active);
    }

    /* Enhanced Hover State */
    .btn:hover,
    .btn-icon:hover {
        transform: translateY(-2px);
        box-shadow: var(--btn-shadow-hover);
    }

    /* Enhanced Focus State */
    .btn:focus,
    .btn-icon:focus {
        outline: none;
        box-shadow: 0 0 0 3px rgba(var(--primary-color-rgb), 0.2);
    }

    /* Enhanced Active Focus State */
    .btn:focus:active,
    .btn-icon:focus:active {
        box-shadow: 0 0 0 2px rgba(var(--primary-color-rgb), 0.3);
    }

    /* Enhanced Hover Focus State */
    .btn:focus:hover,
    .btn-icon:focus:hover {
        box-shadow: 0 0 0 4px rgba(var(--primary-color-rgb), 0.1);
    }

    /* Enhanced Loading Focus State */
    .btn.loading:focus {
        box-shadow: none;
    }

    /* Enhanced Disabled Focus State */
    .btn:disabled:focus,
    .btn-icon:disabled:focus {
        box-shadow: none;
    }

    /* Enhanced Active Disabled State */
    .btn:disabled:active,
    .btn-icon:disabled:active {
        transform: none;
    }

    /* Enhanced Hover Disabled State */
    .btn:disabled:hover,
    .btn-icon:disabled:hover {
        transform: none;
    }

    /* Enhanced Focus Disabled State */
    .btn:disabled:focus,
    .btn-icon:disabled:focus {
        outline: none;
    }

    /* Enhanced Active Hover Focus State */
    .btn:active:hover:focus,
    .btn-icon:active:hover:focus {
        box-shadow: 0 0 0 3px rgba(var(--primary-color-rgb), 0.2);
    }

    /* Enhanced Loading Hover Focus State */
    .btn.loading:hover:focus {
        box-shadow: none;
    }

    /* Enhanced Disabled Hover Focus State */
    .btn:disabled:hover:focus,
    .btn-icon:disabled:hover:focus {
        box-shadow: none;
    }

    /* Enhanced Active Loading Focus State */
    .btn.loading:active:focus {
        box-shadow: none;
    }

    /* Enhanced Disabled Loading Focus State */
    .btn:disabled.loading:focus {
        box-shadow: none;
    }

    /* Enhanced Active Disabled Loading Focus State */
    .btn:disabled.loading:active:focus {
        box-shadow: none;
    }

    /* Enhanced Hover Disabled Loading Focus State */
    .btn:disabled.loading:hover:focus {
        box-shadow: none;
    }

    /* Enhanced Active Hover Disabled Loading Focus State */
    .btn:disabled.loading:active:hover:focus {
        box-shadow: none;
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize variables
        const searchInput = document.getElementById('booking-search');
        const dateFilter = document.getElementById('date-filter');
        const statusFilter = document.getElementById('status-filter');
        const serviceFilter = document.getElementById('service-filter');
        const sortDropdown = document.getElementById('sort-dropdown');
        const exportBtn = document.getElementById('export-btn');
        const refreshBtn = document.getElementById('refresh-btn');
        const bookingsGrid = document.getElementById('bookings-grid');
        const bulkActionsBar = document.getElementById('bulk-actions-bar');
        const selectedCount = document.getElementById('selected-count');
        const bulkDeleteBtn = document.getElementById('bulk-delete-btn');
        const bulkStatusSelect = document.getElementById('bulk-status-select');
        const bulkStatusBtn = document.getElementById('bulk-status-btn');
        const modal = document.getElementById('booking-details-modal');
        const closeModal = document.querySelector('.close-modal');

        // Search functionality with debounce
        let searchTimeout;
        searchInput.addEventListener('input', function(e) {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(() => {
                const searchTerm = e.target.value.toLowerCase();
                filterBookings();
            }, 300);
        });

        // Filter functionality
        function filterBookings() {
            const searchTerm = searchInput.value.toLowerCase();
            const selectedDate = dateFilter.value;
            const selectedStatus = statusFilter.value;
            const selectedService = serviceFilter.value;
            const sortValue = sortDropdown.value;

            const bookingCards = Array.from(document.querySelectorAll('.booking-card'));
            
            // Filter
            bookingCards.forEach(card => {
                const text = card.textContent.toLowerCase();
                const date = card.querySelector('.booking-datetime .date').textContent;
                const status = card.querySelector('.booking-status').textContent.trim();
                const service = card.querySelector('.booking-service span').textContent;

                const matchesSearch = text.includes(searchTerm);
                const matchesDate = !selectedDate || date.includes(selectedDate);
                const matchesStatus = !selectedStatus || status === selectedStatus;
                const matchesService = !selectedService || service === selectedService;

                card.style.display = matchesSearch && matchesDate && matchesStatus && matchesService ? 'block' : 'none';
            });

            // Sort
            const visibleCards = bookingCards.filter(card => card.style.display !== 'none');
            visibleCards.sort((a, b) => {
                if (sortValue === 'date-desc') {
                    return new Date(b.querySelector('.booking-datetime .date').textContent) - 
                           new Date(a.querySelector('.booking-datetime .date').textContent);
                } else if (sortValue === 'date-asc') {
                    return new Date(a.querySelector('.booking-datetime .date').textContent) - 
                           new Date(b.querySelector('.booking-datetime .date').textContent);
                } else if (sortValue === 'status') {
                    return a.querySelector('.booking-status').textContent.trim()
                           .localeCompare(b.querySelector('.booking-status').textContent.trim());
                } else if (sortValue === 'customer') {
                    return a.querySelector('.customer-name').textContent
                           .localeCompare(b.querySelector('.customer-name').textContent);
                }
            });

            // Reorder in DOM
            visibleCards.forEach(card => bookingsGrid.appendChild(card));
        }

        // Add event listeners for filters
        dateFilter.addEventListener('change', filterBookings);
        statusFilter.addEventListener('change', filterBookings);
        serviceFilter.addEventListener('change', filterBookings);
        sortDropdown.addEventListener('change', filterBookings);

        // Export functionality
        exportBtn.addEventListener('click', function() {
            const bookings = Array.from(document.querySelectorAll('.booking-card')).map(card => {
                return {
                    customer: card.querySelector('.customer-name').textContent,
                    contact: card.querySelector('.customer-contact').textContent,
                    service: card.querySelector('.booking-service span').textContent,
                    date: card.querySelector('.booking-datetime .date').textContent,
                    time: card.querySelector('.booking-datetime .time').textContent,
                    status: card.querySelector('.booking-status').textContent.trim(),
                    notes: card.querySelector('.booking-notes')?.querySelector('span')?.textContent || ''
                };
            });

            const csv = [
                ['Customer', 'Contact', 'Service', 'Date', 'Time', 'Status', 'Notes'],
                ...bookings.map(b => [b.customer, b.contact, b.service, b.date, b.time, b.status, b.notes])
            ].map(row => row.map(cell => `"${cell}"`).join(',')).join('\n');

            const blob = new Blob([csv], { type: 'text/csv' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `bookings-${new Date().toISOString().split('T')[0]}.csv`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);
        });

        // Refresh functionality
        refreshBtn.addEventListener('click', function() {
            this.classList.add('loading');
            window.location.reload();
        });

        // Bulk actions functionality
        const bulkCheckboxes = document.querySelectorAll('.bulk-checkbox');
        bulkCheckboxes.forEach(checkbox => {
            checkbox.addEventListener('change', function() {
                const selectedIds = Array.from(document.querySelectorAll('.bulk-checkbox:checked'))
                    .map(cb => cb.getAttribute('data-id'));
                
                if (selectedIds.length > 0) {
                    bulkActionsBar.style.display = 'flex';
                    selectedCount.textContent = selectedIds.length + ' selected';
                } else {
                    bulkActionsBar.style.display = 'none';
                }
            });
        });

        // Bulk delete
        bulkDeleteBtn.addEventListener('click', function() {
            const selectedIds = Array.from(document.querySelectorAll('.bulk-checkbox:checked'))
                .map(cb => cb.getAttribute('data-id'));
            
            if (confirm('Are you sure you want to delete these bookings?')) {
                fetch('/api/bookings/bulk-action', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ ids: selectedIds, action: 'delete' }),
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        window.location.reload();
                    } else {
                        alert('Error: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred');
                });
            }
        });

        // Bulk status update
        bulkStatusBtn.addEventListener('click', function() {
            const selectedIds = Array.from(document.querySelectorAll('.bulk-checkbox:checked'))
                .map(cb => cb.getAttribute('data-id'));
            const status = bulkStatusSelect.value;
            
            if (status) {
                fetch('/api/bookings/bulk-action', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ ids: selectedIds, action: 'update-status', status }),
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        window.location.reload();
                    } else {
                        alert('Error: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred');
                });
            } else {
                alert('Please select a status');
            }
        });

        // Modal functionality
        function showModal() {
            modal.style.display = 'block';
            setTimeout(() => {
                modal.classList.add('show');
            }, 10);
        }

        function hideModal() {
            modal.classList.remove('show');
            setTimeout(() => {
                modal.style.display = 'none';
            }, 300);
        }

        // View booking details
        document.querySelectorAll('.view-booking-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const bookingId = this.getAttribute('data-id');
                const bookingCard = document.querySelector(`.booking-card[data-id="${bookingId}"]`);
                
                const details = {
                    customer: bookingCard.querySelector('.customer-name').textContent,
                    contact: bookingCard.querySelector('.customer-contact').textContent,
                    service: bookingCard.querySelector('.booking-service span').textContent,
                    date: bookingCard.querySelector('.booking-datetime .date').textContent,
                    time: bookingCard.querySelector('.booking-datetime .time').textContent,
                    status: bookingCard.querySelector('.booking-status').textContent.trim(),
                    notes: bookingCard.querySelector('.booking-notes')?.querySelector('span')?.textContent || 'No notes'
                };

                const detailsHtml = `
                    <div class="booking-details-grid">
                        <div class="detail-item">
                            <label>Customer</label>
                            <p>${details.customer}</p>
                        </div>
                        <div class="detail-item">
                            <label>Contact</label>
                            <p>${details.contact}</p>
                        </div>
                        <div class="detail-item">
                            <label>Service</label>
                            <p>${details.service}</p>
                        </div>
                        <div class="detail-item">
                            <label>Date & Time</label>
                            <p>${details.date} at ${details.time}</p>
                        </div>
                        <div class="detail-item">
                            <label>Status</label>
                            <p class="status ${details.status.toLowerCase()}">${details.status}</p>
                        </div>
                        <div class="detail-item">
                            <label>Notes</label>
                            <p>${details.notes}</p>
                        </div>
                    </div>
                `;

                document.getElementById('booking-details').innerHTML = detailsHtml;
                showModal();
            });
        });

        // Close modal
        closeModal.addEventListener('click', hideModal);
        modal.addEventListener('click', function(event) {
            if (event.target === modal) {
                hideModal();
            }
        });

        // Edit booking
        document.querySelectorAll('.edit-booking-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const bookingId = this.getAttribute('data-id');
                window.location.href = `/admin/bookings/${bookingId}/edit`;
            });
        });

        // Delete booking
        document.querySelectorAll('.delete-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const bookingId = this.getAttribute('data-id');
                const confirmMessage = this.getAttribute('data-confirm');
                
                if (confirm(confirmMessage)) {
                    fetch(`/api/bookings/delete/${bookingId}`, {
                        method: 'DELETE'
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            window.location.reload();
                        } else {
                            alert('Error: ' + data.message);
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('An error occurred');
                    });
                }
            });
        });
    });
</script> 
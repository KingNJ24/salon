<!-- Add New Button -->
<div class="gallery-header">
    <div class="gallery-actions">
        <button class="btn btn-primary" id="add-image-btn">
            <i class="fas fa-image"></i> Add New Image
        </button>
        <button class="btn btn-secondary" id="add-video-btn">
            <i class="fas fa-video"></i> Add New Video
        </button>
    </div>
    <div class="gallery-tools">
        <button class="btn btn-info" id="manage-categories-btn">
            <i class="fas fa-tags"></i> Manage Categories
        </button>
        <button class="btn btn-outline" id="reorder-mode-btn">
            <i class="fas fa-sort"></i> Enable Reorder Mode
        </button>
        <button class="btn btn-success" id="save-order-btn" style="display: none;">
            <i class="fas fa-save"></i> Save Order
        </button>
    </div>
</div>

<!-- Category Filter -->
<div class="category-filter-container">
    <button class="category-filter active" data-category="all">All</button>
    <% if (typeof categories !== 'undefined' && categories.length > 0) { %>
        <% categories.forEach(function(category) { %>
            <button class="category-filter" data-category="<%= category %>"><%= category %></button>
        <% }); %>
    <% } %>
</div>

<!-- Gallery Grid -->
<div class="gallery-admin-grid" id="gallery-grid">
    <% if (gallery.length === 0) { %>
        <div class="empty-state">
            <i class="fas fa-images"></i>
            <p>No gallery items yet</p>
            <p class="empty-state-details">Get started by adding your first item with the buttons above.</p>
        </div>
    <% } else { %>
        <% gallery.sort((a, b) => a.displayOrder - b.displayOrder).forEach(item => { %>
            <div class="gallery-admin-item" 
                data-category="<%= item.category %>" 
                data-id="<%= item._id || item.id %>" 
                data-order="<%= item.displayOrder || 0 %>">
                
                <div class="gallery-item-header">
                    <div class="visibility-toggle">
                        <input type="checkbox" id="visibility-<%= item._id || item.id %>" 
                            class="visibility-checkbox" 
                            <%= item.isVisible !== false ? 'checked' : '' %>>
                        <label for="visibility-<%= item._id || item.id %>" class="visibility-label"></label>
                    </div>
                    <div class="reorder-handle">
                        <i class="fas fa-grip-vertical"></i>
                    </div>
                </div>

                <div class="gallery-admin-image <%= item.isVisible === false ? 'hidden' : '' %>">
                    <% if (item.type === 'video') { %>
                        <div class="video-thumbnail" data-video-src="<%= item.videoUrl %>">
                            <img src="<%= item.image %>" alt="<%= item.title %>" 
                                onerror="this.src='https://via.placeholder.com/300x200?text=<%= item.title.replace(/ /g, '+') %>'">
                            <div class="play-button">
                                <i class="fas fa-play"></i>
                            </div>
                        </div>
                    <% } else { %>
                        <img src="<%= item.image %>" alt="<%= item.title %>" 
                            onerror="this.src='https://via.placeholder.com/300x200?text=<%= item.title.replace(/ /g, '+') %>'">
                    <% } %>
                </div>

                <div class="gallery-item-info">
                    <h3 class="gallery-item-title"><%= item.title %></h3>
                    <span class="gallery-item-category"><%= item.category %></span>
                    <div class="gallery-item-actions">
                        <button class="btn btn-sm btn-primary edit-gallery-btn" 
                            data-id="<%= item.id %>"
                            data-title="<%= item.title %>"
                            data-category="<%= item.category %>"
                            data-image="<%= item.image %>"
                            data-type="<%= item.type || 'image' %>"
                            data-video-url="<%= item.videoUrl || '' %>"
                            data-display-order="<%= item.displayOrder || 0 %>"
                            data-is-visible="<%= item.isVisible !== false %>"
                            data-show-on-homepage="<%= item.showOnHomepage || false %>">
                            <i class="fas fa-edit"></i> Edit
                        </button>
                        <button class="btn btn-sm btn-danger delete-btn" 
                            data-id="<%= item.id %>" 
                            data-confirm="Are you sure you want to delete this item?" 
                            data-endpoint="/api/gallery/delete/<%= item.id %>">
                            <i class="fas fa-trash"></i> Delete
                        </button>
                    </div>
                </div>
            </div>
        <% }); %>
    <% } %>
</div>

<!-- Gallery Edit/Add Modal (hidden by default) -->
<div id="gallery-modal" class="modal" style="display: none;">
    <div class="modal-content">
        <span class="close">&times;</span>
        <h2 id="modal-title">Edit Gallery Item</h2>
        
        <form id="gallery-form" class="admin-form" data-endpoint="/api/gallery/update/0">
            <input type="hidden" id="gallery-id" name="id" value="">
            <input type="hidden" id="gallery-type" name="type" value="image">
            <input type="hidden" id="gallery-display-order" name="displayOrder" value="0">
            
            <div class="form-group">
                <label for="gallery-title">Title</label>
                <input type="text" id="gallery-title" name="title" required>
            </div>
            
            <div class="form-group">
                <label for="gallery-category">Category</label>
                <select id="gallery-category" name="category" required>
                    <option value="Bridal">Bridal</option>
                    <option value="Colors">Colors</option>
                    <option value="Cuts">Cuts</option>
                    <option value="Makeup">Makeup</option>
                    <option value="Textures">Textures</option>
                </select>
            </div>
            
            <div class="form-group">
                <div style="display: flex; gap: 15px; margin-bottom: 15px;">
                    <div style="display: flex; align-items: center;">
                        <input type="checkbox" id="gallery-visible" name="isVisible" checked style="margin-right: 8px;">
                        <label for="gallery-visible">Visible in Lookbook</label>
                    </div>
                    <div style="display: flex; align-items: center;">
                        <input type="checkbox" id="gallery-homepage" name="showOnHomepage" style="margin-right: 8px;">
                        <label for="gallery-homepage">Show on Homepage</label>
                    </div>
                </div>
            </div>
            
            <div class="form-group image-upload">
                <label id="thumbnail-label" for="image-file-input">Thumbnail Image</label>
                <div class="image-preview" style="margin-bottom: 10px;">
                    <img src="" alt="Preview" style="max-width: 100%; max-height: 200px; display: none;">
                </div>
                <input type="file" accept="image/*" class="form-control" id="image-file-input">
                <div style="display: flex; gap: 10px; margin-top: 10px;">
                    <button type="button" class="btn upload-btn">Upload</button>
                    <input type="text" id="gallery-image" name="image" class="image-url-input" style="flex: 1;" placeholder="Image URL">
                </div>
                <p class="help-text">Upload an image or provide a URL for the thumbnail. For videos, if left empty, a thumbnail will be auto-generated.</p>
            </div>
            
            <div class="form-group video-url-group" style="display: none;">
                <label for="gallery-video-url">Video File</label>
                <div class="video-preview" style="margin-bottom: 10px; max-width: 100%; max-height: 300px; display: none;">
                    <video id="video-preview" controls preload="metadata" style="max-width: 100%; max-height: 300px;">
                        <source src="" type="video/mp4">
                        Your browser does not support the video tag.
                    </video>
                </div>
                <div class="image-upload">
                    <input type="file" accept="video/*" id="video-file-input" class="form-control">
                    <div style="display: flex; gap: 10px; margin-top: 10px;">
                        <button type="button" class="btn upload-btn" id="video-upload-btn">Upload Video</button>
                        <input type="text" id="gallery-video-url" name="videoUrl" class="image-url-input" style="flex: 1;" placeholder="Video URL">
                    </div>
                    <p class="help-text">Upload a video file (MP4 recommended) or provide a video URL.</p>
                </div>
                <button type="button" class="btn" id="generate-thumbnail-btn" style="margin-top: 10px; background-color: #d4a373;">Generate Thumbnail from Video</button>
                <p id="thumbnail-status" style="margin-top: 10px; display: none;"></p>
            </div>
            
            <div class="actions" style="margin-top: 20px; display: flex; gap: 10px;">
                <button type="button" class="btn btn-secondary close-modal" style="background-color: #6c757d;">Cancel</button>
                <button type="submit" class="btn" id="save-gallery-button">Save</button>
            </div>
        </form>
    </div>
</div>

<!-- Category Management Modal -->
<div id="categories-modal" class="modal" style="display: none;">
    <div class="modal-content" style="max-width: 600px;">
        <span class="close">&times;</span>
        <h2>Manage Gallery Categories</h2>
        
        <div style="margin-bottom: 20px;">
            <form id="add-category-form" class="admin-form" style="display: flex; gap: 10px; margin-bottom: 20px;">
                <div style="flex: 1;">
                    <input type="text" id="new-category-name" placeholder="New category name" required>
                </div>
                <button type="submit" class="btn" style="background-color: #28a745;">Add Category</button>
            </form>
            
            <div class="table-container">
                <table id="categories-table">
                    <thead>
                        <tr>
                            <th>Order</th>
                            <th>Category Name</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="categories-tbody">
                        <tr>
                            <td colspan="4" class="text-center">Loading categories...</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
        
        <div class="actions" style="display: flex; justify-content: flex-end; gap: 10px; margin-top: 20px;">
            <button type="button" class="btn btn-secondary close-modal">Close</button>
        </div>
    </div>
</div>

<style>
    .gallery-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
        flex-wrap: wrap;
        gap: 1rem;
    }

    .gallery-actions, .gallery-tools {
        display: flex;
        gap: 1rem;
        flex-wrap: wrap;
    }

    .btn {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.75rem 1.5rem;
        border-radius: 8px;
        font-weight: 500;
        transition: all 0.3s ease;
        border: none;
        cursor: pointer;
    }

    .btn-primary {
        background: linear-gradient(135deg, #9c8370, #7c6b5d);
        color: white;
    }

    .btn-secondary {
        background: linear-gradient(135deg, #d4a373, #bc6c25);
        color: white;
    }

    .btn-info {
        background: linear-gradient(135deg, #a5b4fc, #818cf8);
        color: white;
    }

    .btn-success {
        background: linear-gradient(135deg, #86efac, #4ade80);
        color: white;
    }

    .btn-outline {
        background: transparent;
        border: 2px solid #9c8370;
        color: #9c8370;
    }

    .btn-outline:hover {
        background: #9c8370;
        color: white;
    }

    .btn-danger {
        background: linear-gradient(135deg, #fca5a5, #f87171);
        color: white;
    }

    .btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    }

    .category-filter-container {
        display: flex;
        gap: 0.75rem;
        flex-wrap: wrap;
        margin-bottom: 2rem;
    }

    .category-filter {
        padding: 0.5rem 1rem;
        border-radius: 6px;
        background: #f3f4f6;
        color: #4b5563;
        border: none;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .category-filter.active {
        background: #9c8370;
        color: white;
    }

    .category-filter:hover:not(.active) {
        background: #e5e7eb;
    }

    .gallery-admin-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        gap: 2rem;
    }

    .gallery-admin-item {
        background: white;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        transition: all 0.3s ease;
    }

    .gallery-admin-item:hover {
        transform: translateY(-4px);
        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    }

    .gallery-item-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem;
        background: #f9fafb;
        border-bottom: 1px solid #e5e7eb;
    }

    .visibility-toggle {
        position: relative;
    }

    .visibility-checkbox {
        display: none;
    }

    .visibility-label {
        display: inline-block;
        width: 40px;
        height: 20px;
        background: #e5e7eb;
        border-radius: 20px;
        position: relative;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .visibility-label:after {
        content: '';
        position: absolute;
        width: 16px;
        height: 16px;
        border-radius: 50%;
        background: white;
        top: 2px;
        left: 2px;
        transition: all 0.3s ease;
    }

    .visibility-checkbox:checked + .visibility-label {
        background: #4f46e5;
    }

    .visibility-checkbox:checked + .visibility-label:after {
        left: 22px;
    }

    .reorder-handle {
        cursor: grab;
        color: #9ca3af;
        padding: 0.5rem;
    }

    .gallery-admin-image {
        height: 200px;
        overflow: hidden;
        position: relative;
    }

    .gallery-admin-image.hidden {
        opacity: 0.5;
    }

    .gallery-admin-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s ease;
    }

    .gallery-admin-item:hover .gallery-admin-image img {
        transform: scale(1.05);
    }

    .gallery-item-info {
        padding: 1rem;
    }

    .gallery-item-title {
        font-size: 1.1rem;
        font-weight: 600;
        color: #1f2937;
        margin: 0 0 0.5rem;
    }

    .gallery-item-category {
        display: inline-block;
        padding: 0.25rem 0.75rem;
        background: #f3f4f6;
        color: #4b5563;
        border-radius: 4px;
        font-size: 0.875rem;
        margin-bottom: 1rem;
    }

    .gallery-item-actions {
        display: flex;
        gap: 0.75rem;
    }

    .btn-sm {
        padding: 0.5rem 1rem;
        font-size: 0.875rem;
    }

    .empty-state {
        grid-column: 1 / -1;
        text-align: center;
        padding: 4rem 2rem;
        background: #f9fafb;
        border-radius: 12px;
        color: #6b7280;
    }

    .empty-state i {
        font-size: 3rem;
        color: #9ca3af;
        margin-bottom: 1rem;
    }

    .empty-state-details {
        font-size: 0.875rem;
        margin-top: 0.5rem;
    }

    @media (max-width: 768px) {
        .gallery-header {
            flex-direction: column;
            align-items: stretch;
        }

        .gallery-actions, .gallery-tools {
            justify-content: center;
        }

        .gallery-admin-grid {
            grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
            gap: 1rem;
        }
    }
</style>

<!-- Include the gallery editor script -->
<script src="/js/admin/gallery-editor.js"></script>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const modal = document.getElementById('gallery-modal');
        const closeButtons = document.querySelectorAll('.close, .close-modal');
        const addImageBtn = document.getElementById('add-image-btn');
        const addVideoBtn = document.getElementById('add-video-btn');
        const editButtons = document.querySelectorAll('.edit-gallery-btn');
        const galleryForm = document.getElementById('gallery-form');
        const videoUrlGroup = document.querySelector('.video-url-group');
        const thumbnailLabel = document.getElementById('thumbnail-label');
        const videoFileInput = document.getElementById('video-file-input');
        const videoUploadBtn = document.getElementById('video-upload-btn');
        const videoPreview = document.querySelector('.video-preview');
        const videoPlayer = document.getElementById('video-preview');
        const galleryVideoUrlInput = document.getElementById('gallery-video-url');
        const generateThumbnailBtn = document.getElementById('generate-thumbnail-btn');
        const thumbnailPreview = document.querySelector('.image-preview img');
        const thumbnailInput = document.getElementById('gallery-image');
        const thumbnailStatus = document.getElementById('thumbnail-status');
        const saveGalleryButton = document.getElementById('save-gallery-button');
        const categoryFilterButtons = document.querySelectorAll('.category-filter');
        const galleryItems = document.querySelectorAll('.gallery-admin-item');
        const galleryCount = document.getElementById('gallery-count');
        const galleryLoadingIndicator = document.getElementById('gallery-loading');
        const reorderModeBtn = document.getElementById('reorder-mode-btn');
        const saveOrderBtn = document.getElementById('save-order-btn');
        const reorderInstructions = document.getElementById('reorder-instructions');
        const galleryGrid = document.getElementById('gallery-grid');
        
        let editingId = null;
        let isReorderMode = false;
        let itemsCount = galleryGrid.querySelectorAll('.gallery-admin-item').length;
        
        if (galleryCount) {
            galleryCount.textContent = itemsCount;
        }
        
        // Initialize event handlers for visibility and homepage
        initToggleHandlers();
        
        // Filter gallery items by category
        categoryFilterButtons.forEach(filter => {
            filter.addEventListener('click', function() {
                // Update active state
                categoryFilterButtons.forEach(f => f.classList.remove('active'));
                categoryFilterButtons.forEach(f => f.style.backgroundColor = 'transparent');
                categoryFilterButtons.forEach(f => f.style.color = '#333');
                
                this.classList.add('active');
                this.style.backgroundColor = '#9c8370';
                this.style.color = 'white';
                
                const category = this.getAttribute('data-category');
                
                // Filter items
                const items = galleryGrid.querySelectorAll('.gallery-admin-item');
                items.forEach(item => {
                    if (category === 'all' || item.getAttribute('data-category') === category) {
                        item.style.display = '';
                    } else {
                        item.style.display = 'none';
                    }
                });
            });
        });
        
        // Initialize reorder mode
        reorderModeBtn.addEventListener('click', function() {
            toggleReorderMode(!isReorderMode);
        });
        
        // Save the new order
        saveOrderBtn.addEventListener('click', saveGalleryOrder);
        
        // Close modal on close button click
        closeButtons.forEach(button => {
            button.addEventListener('click', function() {
                modal.style.display = 'none';
            });
        });
        
        // Add new image
        addImageBtn.addEventListener('click', function() {
            openGalleryModal('Add New Image', 'image');
        });
        
        // Add new video
        addVideoBtn.addEventListener('click', function() {
            openGalleryModal('Add New Video', 'video');
        });
        
        // Initialize edit buttons
        initEditButtons();
        
        // Initialize delete buttons
        initDeleteButtons();
        
        // Handle gallery form submit
        galleryForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const formObject = {};
            
            // Convert FormData to object
            formData.forEach((value, key) => {
                if (key === 'isVisible' || key === 'showOnHomepage') {
                    formObject[key] = true; // Checkbox values (checked = true)
                } else {
                    formObject[key] = value;
                }
            });
            
            // Check for unchecked checkboxes (they don't get included in formData)
            if (!formData.has('isVisible')) {
                formObject.isVisible = false;
            }
            
            if (!formData.has('showOnHomepage')) {
                formObject.showOnHomepage = false;
            }
            
            // If item is not visible, it can't be on homepage
            if (formObject.isVisible === false) {
                formObject.showOnHomepage = false;
            }
            
            // Get the endpoint from the form
            const endpoint = this.getAttribute('data-endpoint');
            
            // Show saving indicator
            saveGalleryButton.disabled = true;
            saveGalleryButton.textContent = 'Saving...';
            
            // Send data to server
            fetch(endpoint, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(formObject)
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    console.log('Gallery item saved successfully');
                    
                    // Update UI or redirect
                    saveGalleryButton.textContent = 'Saved!';
                    
                    // Close modal and reload page
                    setTimeout(() => {
                        modal.style.display = 'none';
                    window.location.reload();
                    }, 500);
                } else {
                    console.error('Error saving gallery item:', data.message);
                    saveGalleryButton.textContent = 'Error';
                    alert(`Failed to save: ${data.message || 'Unknown error'}`);
                    saveGalleryButton.disabled = false;
                }
            })
            .catch(error => {
                console.error('Error submitting form:', error);
                saveGalleryButton.textContent = 'Error';
                alert(`Failed to save: ${error.message}`);
                saveGalleryButton.disabled = false;
            });
        });
        
        // Initialize toggle handlers for visibility and homepage
        function initToggleHandlers() {
            // Visibility toggles
            document.querySelectorAll('.visibility-toggle').forEach(toggle => {
                toggle.addEventListener('click', function() {
                    const galleryItem = this.closest('.gallery-admin-item');
                    const itemId = galleryItem.getAttribute('data-id');
                    const isVisible = this.querySelector('.visibility-checkbox').checked;
                    
                    // Toggle visibility state
                    const newVisibility = !isVisible;
                    
                    // Update UI immediately for better UX
                    this.querySelector('.visibility-checkbox').checked = newVisibility;
                    this.querySelector('.visibility-label').style.backgroundColor = newVisibility ? 'rgba(40, 167, 69, 0.8)' : 'rgba(108, 117, 125, 0.8)';
                    
                    if (newVisibility) {
                        this.querySelector('.visibility-label').innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="white" viewBox="0 0 16 16"><path d="M16 8s-3-5.5-8-5.5S0 8 0 8s3 5.5 8 5.5S16 8 16 8zM1.173 8a13.133 13.133 0 0 1 1.66-2.043C4.12 4.668 5.88 3.5 8 3.5c2.12 0 3.879 1.168 5.168 2.457A13.133 13.133 0 0 1 14.828 8c-.058.087-.122.183-.195.288-.335.48-.83 1.12-1.465 1.755C11.879 11.332 10.119 12.5 8 12.5c-2.12 0-3.879-1.168-5.168-2.457A13.134 13.134 0 0 1 1.172 8z"/><path d="M8 5.5a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5zM4.5 8a3.5 3.5 0 1 1 7 0 3.5 3.5 0 0 1-7 0z"/></svg>';
                    } else {
                        this.querySelector('.visibility-label').innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="white" viewBox="0 0 16 16"><path d="M13.359 11.238C15.06 9.72 16 8 16 8s-3-5.5-8-5.5a7.028 7.028 0 0 0-2.79.588l.77.771A5.944 5.944 0 0 1 8 3.5c2.12 0 3.879 1.168 5.168 2.457A13.134 13.134 0 0 1 14.828 8c-.058.087-.122.183-.195.288-.335.48-.83 1.12-1.465 1.755-.165.165-.337.328-.517.486l.708.709z"/><path d="M11.297 9.176a3.5 3.5 0 0 0-4.474-4.474l.823.823a2.5 2.5 0 0 1 2.829 2.829l.822.822zm-2.943 1.299.822.822a3.5 3.5 0 0 1-4.474-4.474l.823.823a2.5 2.5 0 0 0 2.829 2.829z"/><path d="M3.35 5.47c-.18.16-.353.322-.518.487A13.134 13.134 0 0 0 1.172 8l.195.288c.335.48.83 1.12 1.465 1.755C4.121 11.332 5.881 12.5 8 12.5c.716 0 1.39-.133 2.02-.36l.77.772A7.029 7.029 0 0 1 8 13.5C3 13.5 0 8 0 8s.939-1.721 2.641-3.238l.708.709zm10.296 8.884-12-12 .708-.708 12 12-.708.708z"/></svg>';
                    }
                    
                    // Update image opacity
                    galleryItem.querySelector('.gallery-admin-image').style.opacity = newVisibility ? 1 : 0.5;
                    
                    // Also update homepage indicator - when not visible, item can't be on homepage
                    const homepageIndicator = galleryItem.querySelector('.homepage-indicator');
                    if (!newVisibility) {
                        homepageIndicator.style.backgroundColor = 'rgba(108, 117, 125, 0.3)';
                    }
                    
                    // Send update to server
                    fetch(`/api/gallery/update/${itemId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ 
                            isVisible: newVisibility,
                            // When making item invisible, also remove from homepage
                            ...(newVisibility ? {} : { showOnHomepage: false })
                        })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (!data.success) {
                            // Revert UI if failed
                            console.error('Failed to update visibility');
                            this.querySelector('.visibility-checkbox').checked = isVisible;
                            this.style.backgroundColor = isVisible ? 'rgba(40, 167, 69, 0.8)' : 'rgba(108, 117, 125, 0.8)';
                            galleryItem.querySelector('.gallery-admin-image').style.opacity = isVisible ? 1 : 0.5;
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        // Revert UI on error
                        this.querySelector('.visibility-checkbox').checked = isVisible;
                        this.style.backgroundColor = isVisible ? 'rgba(40, 167, 69, 0.8)' : 'rgba(108, 117, 125, 0.8)';
                        galleryItem.querySelector('.gallery-admin-image').style.opacity = isVisible ? 1 : 0.5;
                    });
                });
            });
            
            // Homepage indicators
            document.querySelectorAll('.homepage-indicator').forEach(indicator => {
                indicator.addEventListener('click', function() {
                    const galleryItem = this.closest('.gallery-admin-item');
                    const itemId = galleryItem.getAttribute('data-id');
                    const visibilityToggle = galleryItem.querySelector('.visibility-toggle');
                    const isVisible = visibilityToggle.querySelector('.visibility-checkbox').checked;
                    
                    // Only allow changing homepage status for visible items
                    if (!isVisible) {
                        alert('Item must be visible to appear on homepage. Click the eye icon first.');
                        return;
                    }
                    
                    // Get current homepage state - use computed style to detect current state
                    const currentColor = window.getComputedStyle(this).backgroundColor;
                    const showOnHomepage = currentColor.includes('220') || currentColor.includes('rgb(220');
                    
                    // Toggle homepage state
                    const newHomepageState = !showOnHomepage;
                    
                    // Update UI immediately for better UX
                    this.style.backgroundColor = newHomepageState ? 'rgba(220, 53, 69, 0.8)' : 'rgba(108, 117, 125, 0.3)';
                    
                    console.log('Setting showOnHomepage to', newHomepageState, 'for item', itemId);
                    
                    // Send update to server
                    fetch(`/api/gallery/update/${itemId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ 
                            showOnHomepage: newHomepageState 
                        })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (!data.success) {
                            // Revert UI if failed
                            console.error('Failed to update homepage visibility');
                            this.style.backgroundColor = showOnHomepage ? 'rgba(220, 53, 69, 0.8)' : 'rgba(108, 117, 125, 0.3)';
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        // Revert UI on error
                        this.style.backgroundColor = showOnHomepage ? 'rgba(220, 53, 69, 0.8)' : 'rgba(108, 117, 125, 0.3)';
                    });
                });
            });
        }
        
        // Function to toggle reorder mode
        function toggleReorderMode(enable) {
            isReorderMode = enable;
            
            // Show/hide reorder handles
            const reorderHandles = document.querySelectorAll('.reorder-handle');
            reorderHandles.forEach(handle => {
                handle.style.display = enable ? 'flex' : 'none';
            });
            
            // Show/hide buttons
            reorderModeBtn.style.display = enable ? 'none' : 'block';
            saveOrderBtn.style.display = enable ? 'block' : 'none';
            reorderInstructions.style.display = enable ? 'block' : 'none';
            
            // Enable/disable sorting
            if (enable) {
                initSortable();
            }
        }
        
        // Initialize sortable functionality using Sortable.js library
        function initSortable() {
            // Check if Sortable is available
            if (typeof Sortable !== 'undefined') {
                new Sortable(galleryGrid, {
                    animation: 150,
                    handle: '.reorder-handle',
                    onEnd: function() {
                        // Update the order numbers in the UI
                        updateOrderDisplay();
                    }
                });
            } else {
                // Fallback if Sortable.js is not loaded
                console.error('Sortable.js library is not loaded. Please include it in your HTML.');
                alert('Reordering requires the Sortable.js library. Please add it to your project.');
                toggleReorderMode(false);
            }
        }
        
        // Update display order numbers in the UI
        function updateOrderDisplay() {
            const items = galleryGrid.querySelectorAll('.gallery-admin-item');
            items.forEach((item, index) => {
                item.setAttribute('data-order', index);
                const orderBadge = item.querySelector('.order-badge');
                if (orderBadge) {
                    orderBadge.textContent = '#' + index;
                }
            });
        }
        
        // Save the gallery order
        function saveGalleryOrder() {
            const items = document.querySelectorAll('.gallery-admin-item');
            const updates = [];
            
            items.forEach((item, index) => {
                const itemId = item.getAttribute('data-id');
                console.log(`Reordering: Item ID ${itemId} to position ${index}`);
                updates.push({
                    id: itemId,
                    displayOrder: index
                });
            });
            
            console.log('Updates to send:', updates);
            
            // Show saving state
            saveOrderBtn.textContent = 'Saving...';
            saveOrderBtn.disabled = true;
            
            // Send updates to server
            const promises = updates.map(update => {
                return fetch(`/api/gallery/update/${update.id}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        displayOrder: update.displayOrder
                    })
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    if (!data.success) {
                        console.error(`Failed to update item ${update.id}:`, data.message);
                    }
                    return data.success;
                })
                .catch(error => {
                    console.error(`Error updating item ${update.id}:`, error);
                    return false;
                });
            });
            
            // Wait for all updates to complete
            Promise.all(promises).then(results => {
                const allSuccessful = results.every(success => success);
                
                saveOrderBtn.disabled = false;
                if (allSuccessful) {
                    saveOrderBtn.textContent = 'Order Saved!';
                    
                    // Update the order badges
                    items.forEach((item, index) => {
                        const orderBadge = item.querySelector('.order-badge');
                        if (orderBadge) {
                            orderBadge.textContent = `#${index}`;
                        }
                        item.setAttribute('data-order', index);
                    });
                    
                    // Reload page to ensure the order is reflected
                    setTimeout(() => {
                        window.location.reload();
                    }, 1000);
                } else {
                    saveOrderBtn.textContent = 'Error Saving Order';
                    setTimeout(() => {
                        saveOrderBtn.textContent = 'Try Again';
                    }, 2000);
                }
            });
        }
        
        // Function to open gallery item modal
        function openGalleryModal(title, type, item = null) {
            modal.style.display = 'block';
            modal.querySelector('#modal-title').textContent = title;
            
            // Reset form
            galleryForm.reset();
            
            // Set item type
            document.getElementById('gallery-type').value = type;
            
            // Show/hide video fields based on type
            videoUrlGroup.style.display = type === 'video' ? 'block' : 'none';
            
            // Handle edit case
            if (item) {
                editingId = item.id;
                
                // Set form action
                galleryForm.setAttribute('data-endpoint', `/api/gallery/update/${editingId}`);
                
                // Populate form fields
                document.getElementById('gallery-id').value = editingId;
                document.getElementById('gallery-title').value = item.title;
                document.getElementById('gallery-category').value = item.category;
                document.getElementById('gallery-image').value = item.image;
                document.getElementById('gallery-visible').checked = item.isVisible !== 'false';
                document.getElementById('gallery-homepage').checked = item.showOnHomepage === 'true';
                document.getElementById('gallery-display-order').value = item.displayOrder || 0;
                
                // Show image preview
                const imagePreview = document.querySelector('.image-preview img');
                imagePreview.src = item.image;
                imagePreview.style.display = 'block';
                
                // Handle video type
                if (type === 'video') {
                    document.getElementById('gallery-video-url').value = item.videoUrl;
                    
                    // Show video preview
                    const videoPreview = document.querySelector('.video-preview');
                    const videoElement = document.getElementById('video-preview');
                    videoElement.querySelector('source').src = item.videoUrl;
                    videoElement.load();
                    videoPreview.style.display = 'block';
                }
            } else {
                // Create case
                editingId = null;
                
                // Set form action
                galleryForm.setAttribute('data-endpoint', '/api/gallery/create');
                
                // Clear image preview
                document.querySelector('.image-preview img').style.display = 'none';
                
                // Get maximum current order
                let maxOrder = 0;
                const items = document.querySelectorAll('.gallery-admin-item');
                items.forEach(item => {
                    const order = parseInt(item.getAttribute('data-order') || 0);
                    if (order > maxOrder) maxOrder = order;
                });
                
                // Set new item to be at the end
                document.getElementById('gallery-display-order').value = maxOrder + 1;
                
                // Hide video preview
                document.querySelector('.video-preview').style.display = 'none';
            }
        }
        
        // Initialize edit buttons
        function initEditButtons() {
            document.querySelectorAll('.edit-gallery-btn').forEach(button => {
                button.addEventListener('click', function() {
                    const data = {
                        id: this.getAttribute('data-id'),
                        title: this.getAttribute('data-title'),
                        category: this.getAttribute('data-category'),
                        image: this.getAttribute('data-image'),
                        type: this.getAttribute('data-type'),
                        videoUrl: this.getAttribute('data-video-url'),
                        displayOrder: this.getAttribute('data-display-order'),
                        isVisible: this.getAttribute('data-is-visible'),
                        showOnHomepage: this.getAttribute('data-show-on-homepage')
                    };
                    
                    openGalleryModal(`Edit ${data.type === 'video' ? 'Video' : 'Image'}`, data.type, data);
                });
            });
        }
        
        // Initialize delete buttons
        function initDeleteButtons() {
            document.querySelectorAll('.delete-btn').forEach(button => {
                button.addEventListener('click', function() {
                    const itemId = this.getAttribute('data-id');
                    const endpoint = this.getAttribute('data-endpoint');
                    const confirmMessage = this.getAttribute('data-confirm');
                    
                    if (confirm(confirmMessage)) {
                        // Disable button
                        this.disabled = true;
                        this.textContent = 'Deleting...';
                        
                        // Send delete request
                        fetch(endpoint, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            }
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                // Remove item from grid
                                const item = this.closest('.gallery-admin-item');
                                item.remove();
                                
                                // Update count
                                itemsCount--;
                                if (galleryCount) {
                                    galleryCount.textContent = itemsCount;
                                }
                                
                                // Show empty state if needed
                                if (itemsCount === 0) {
                                    const emptyState = document.createElement('div');
                                    emptyState.className = 'text-center';
                                    emptyState.style.gridColumn = '1 / -1';
                                    emptyState.style.padding = '50px 0';
                                    emptyState.innerHTML = `
                                        <i class="fas fa-images"></i>
                                        <p>No gallery items yet</p>
                                        <p class="empty-state-details">Get started by adding your first item with the buttons above.</p>
                                    `;
                                    galleryGrid.appendChild(emptyState);
                                }
                            } else {
                                alert('Error: ' + (data.message || 'Failed to delete'));
                                
                                // Re-enable button
                                this.disabled = false;
                                this.textContent = 'Delete';
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            alert('Error: ' + error.message);
                            
                            // Re-enable button
                            this.disabled = false;
                            this.textContent = 'Delete';
                        });
                    }
                });
            });
        }
        
        // Add Sortable.js library if not already loaded
        if (typeof Sortable === 'undefined') {
            const script = document.createElement('script');
            script.src = 'https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js';
            script.onload = function() {
                console.log('Sortable.js loaded successfully');
            };
            script.onerror = function() {
                console.error('Failed to load Sortable.js');
            };
            document.head.appendChild(script);
        }
    });
</script> 
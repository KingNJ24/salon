<!-- Add New Button -->
<div style="margin-bottom: 20px; display: flex; justify-content: space-between; align-items: center;">
    <div>
        <button class="btn" id="add-image-btn">Add New Image</button>
        <button class="btn" id="add-video-btn" style="margin-left: 10px; background-color: #d4a373;">Add New Video</button>
    </div>
    <div>
        <button class="btn" id="reorder-mode-btn" style="background-color: #6c757d;">Enable Reorder Mode</button>
        <button class="btn" id="save-order-btn" style="background-color: #28a745; display: none;">Save Order</button>
    </div>
</div>

<!-- Category Filter -->
<div style="margin-bottom: 20px;">
    <div class="category-filter-container" style="display: flex; gap: 10px; flex-wrap: wrap;">
        <button class="category-filter btn" data-category="all" style="background-color: #9c8370;">All</button>
        <button class="category-filter btn" data-category="Bridal" style="background-color: transparent; color: #333; border: 1px solid #ddd;">Bridal</button>
        <button class="category-filter btn" data-category="Colors" style="background-color: transparent; color: #333; border: 1px solid #ddd;">Colors</button>
        <button class="category-filter btn" data-category="Cuts" style="background-color: transparent; color: #333; border: 1px solid #ddd;">Cuts</button>
        <button class="category-filter btn" data-category="Makeup" style="background-color: transparent; color: #333; border: 1px solid #ddd;">Makeup</button>
        <button class="category-filter btn" data-category="Textures" style="background-color: transparent; color: #333; border: 1px solid #ddd;">Textures</button>
    </div>
</div>

<!-- Gallery Grid -->
<div class="card">
    <div class="card-header">
        <h2>Gallery Items</h2>
        <div class="item-count" style="margin-top: 5px; font-size: 14px; color: #6c757d;">
            <span id="gallery-count"><%= gallery.length %></span> items
        </div>
    </div>
    <div class="card-body">
        <div id="gallery-loading" style="text-align: center; padding: 30px; display: none;">
            <p>Loading gallery items...</p>
        </div>
        
        <div id="reorder-instructions" style="display: none; margin-bottom: 20px; background-color: #f8f9fa; padding: 15px; border-radius: 4px; border-left: 4px solid #9c8370;">
            <p style="margin-bottom: 0;"><strong>Reorder Mode Enabled:</strong> Drag and drop gallery items to change their display order. Click "Save Order" when you're finished.</p>
        </div>
        
        <div class="gallery-admin-grid" id="gallery-grid" style="display: grid; grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); gap: 20px;">
            <% if (gallery.length === 0) { %>
                <div class="text-center" style="grid-column: 1 / -1; padding: 50px 0;">
                    <p style="margin-bottom: 20px; color: #6c757d;">No gallery items yet</p>
                    <p>Get started by adding your first item with the buttons above.</p>
                </div>
            <% } else { %>
                <% gallery.sort((a, b) => a.displayOrder - b.displayOrder).forEach(item => { %>
                    <div class="gallery-admin-item" style="background-color: white; border-radius: 4px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); overflow: hidden; transition: transform 0.2s ease, box-shadow 0.2s ease; position: relative;" 
                        data-category="<%= item.category %>" 
                        data-id="<%= item._id || item.id %>" 
                        data-order="<%= item.displayOrder || 0 %>">
                        
                        <!-- Visibility toggle button -->
                        <div class="visibility-toggle" style="position: absolute; top: 10px; left: 10px; z-index: 5; cursor: pointer; background-color: <%= item.isVisible ? 'rgba(40, 167, 69, 0.8)' : 'rgba(108, 117, 125, 0.8)' %>; border-radius: 50%; width: 32px; height: 32px; display: flex; align-items: center; justify-content: center;" data-visible="<%= item.isVisible !== false %>">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="white" viewBox="0 0 16 16">
                                <% if (item.isVisible !== false) { %>
                                    <path d="M16 8s-3-5.5-8-5.5S0 8 0 8s3 5.5 8 5.5S16 8 16 8zM1.173 8a13.133 13.133 0 0 1 1.66-2.043C4.12 4.668 5.88 3.5 8 3.5c2.12 0 3.879 1.168 5.168 2.457A13.133 13.133 0 0 1 14.828 8c-.058.087-.122.183-.195.288-.335.48-.83 1.12-1.465 1.755C11.879 11.332 10.119 12.5 8 12.5c-2.12 0-3.879-1.168-5.168-2.457A13.134 13.134 0 0 1 1.172 8z"/>
                                    <path d="M8 5.5a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5zM4.5 8a3.5 3.5 0 1 1 7 0 3.5 3.5 0 0 1-7 0z"/>
                                <% } else { %>
                                    <path d="M13.359 11.238C15.06 9.72 16 8 16 8s-3-5.5-8-5.5a7.028 7.028 0 0 0-2.79.588l.77.771A5.944 5.944 0 0 1 8 3.5c2.12 0 3.879 1.168 5.168 2.457A13.134 13.134 0 0 1 14.828 8c-.058.087-.122.183-.195.288-.335.48-.83 1.12-1.465 1.755-.165.165-.337.328-.517.486l.708.709z"/>
                                    <path d="M11.297 9.176a3.5 3.5 0 0 0-4.474-4.474l.823.823a2.5 2.5 0 0 1 2.829 2.829l.822.822zm-2.943 1.299.822.822a3.5 3.5 0 0 1-4.474-4.474l.823.823a2.5 2.5 0 0 0 2.829 2.829z"/>
                                    <path d="M3.35 5.47c-.18.16-.353.322-.518.487A13.134 13.134 0 0 0 1.172 8l.195.288c.335.48.83 1.12 1.465 1.755C4.121 11.332 5.881 12.5 8 12.5c.716 0 1.39-.133 2.02-.36l.77.772A7.029 7.029 0 0 1 8 13.5C3 13.5 0 8 0 8s.939-1.721 2.641-3.238l.708.709zm10.296 8.884-12-12 .708-.708 12 12-.708.708z"/>
                                <% } %>
                            </svg>
                        </div>
                        
                        <!-- Homepage toggle button -->
                        <div class="homepage-toggle" style="position: absolute; top: 10px; right: 10px; z-index: 5; cursor: pointer; background-color: <%= item.showOnHomepage ? 'rgba(220, 53, 69, 0.8)' : 'rgba(108, 117, 125, 0.8)' %>; border-radius: 50%; width: 32px; height: 32px; display: flex; align-items: center; justify-content: center;" data-homepage="<%= item.showOnHomepage || 'false' %>">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="white" viewBox="0 0 16 16">
                                <% if (item.showOnHomepage) { %>
                                    <path d="M2 2v13.5a.5.5 0 0 0 .74.439L8 13.069l5.26 2.87A.5.5 0 0 0 14 15.5V2a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2z"/>
                                <% } else { %>
                                    <path d="M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v13.5a.5.5 0 0 1-.777.416L8 13.101l-5.223 2.815A.5.5 0 0 1 2 15.5V2zm2-1a1 1 0 0 0-1 1v12.566l4.723-2.482a.5.5 0 0 1 .554 0L13 14.566V2a1 1 0 0 0-1-1H4z"/>
                                <% } %>
                            </svg>
                        </div>
                        
                        <!-- Reorder handle (visible in reorder mode) -->
                        <div class="reorder-handle" style="position: absolute; top: 50%; left: 10px; transform: translateY(-50%); z-index: 5; cursor: grab; background-color: rgba(0,0,0,0.5); border-radius: 4px; width: 30px; height: 30px; display: none; align-items: center; justify-content: center;">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="white" viewBox="0 0 16 16">
                                <path fill-rule="evenodd" d="M3 2.5a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1h-10a.5.5 0 0 1-.5-.5zm0 4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1h-10a.5.5 0 0 1-.5-.5zm0 4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1h-10a.5.5 0 0 1-.5-.5z"/>
                            </svg>
                        </div>
                        
                        <div class="gallery-admin-image" style="height: 200px; overflow: hidden; position: relative; <%= item.isVisible === false ? 'opacity: 0.5;' : '' %>">
                            <% if (item.type === 'video') { %>
                                <!-- Video thumbnail with play button indicator -->
                                <div style="position: relative; width: 100%; height: 100%;">
                                    <img src="<%= item.image %>" alt="<%= item.title %>" style="width: 100%; height: 100%; object-fit: cover;" onerror="this.src='/images/placeholder.jpg'">
                                    <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background: rgba(0,0,0,0.5); border-radius: 50%; width: 40px; height: 40px; display: flex; align-items: center; justify-content: center;">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="white">
                                            <path d="M8 5v14l11-7z"/>
                                        </svg>
                                    </div>
                                    <!-- Video preview on hover -->
                                    <video style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; object-fit: cover; opacity: 0; transition: opacity 0.3s ease;" 
                                          onmouseover="this.style.opacity=1; this.play();" 
                                          onmouseout="this.style.opacity=0; this.pause(); this.currentTime=0;" 
                                          muted loop preload="none">
                                        <source src="<%= item.videoUrl %>" type="video/mp4">
                                    </video>
                                    <!-- Video type indicator badge -->
                                    <div style="position: absolute; top: 50px; right: 10px; background: rgba(0,0,0,0.6); color: white; padding: 5px 10px; border-radius: 4px; font-size: 12px;">
                                        Video
                                    </div>
                                </div>
                            <% } else { %>
                                <img src="<%= item.image %>" alt="<%= item.title %>" style="width: 100%; height: 100%; object-fit: cover;" onerror="this.src='/images/placeholder.jpg'">
                            <% } %>
                        </div>
                        <div class="gallery-admin-info" style="padding: 15px;">
                            <div style="display: flex; justify-content: space-between; align-items: center;">
                                <h3 style="margin-bottom: 5px;"><%= item.title %></h3>
                                <span class="order-badge" style="background-color: #f8f9fa; color: #6c757d; padding: 2px 8px; border-radius: 20px; font-size: 12px; font-weight: bold;">
                                    #<%= item.displayOrder || 0 %>
                                </span>
                            </div>
                            <p style="margin-bottom: 5px; color: #6c757d;">
                                <span class="category-badge" style="background-color: #f8f9fa; padding: 2px 8px; border-radius: 10px; font-size: 12px; color: #333;"><%= item.category %></span>
                            </p>
                            <% if (item.type === 'video') { %>
                                <p style="margin-bottom: 10px; color: #6c757d; font-size: 0.8em;">Video</p>
                            <% } %>
                            <div class="actions" style="display: flex; gap: 10px; margin-top: 10px;">
                                <button class="btn btn-sm edit-gallery-btn" 
                                    data-id="<%= item.id %>"
                                    data-title="<%= item.title %>"
                                    data-category="<%= item.category %>"
                                    data-image="<%= item.image %>"
                                    data-type="<%= item.type || 'image' %>"
                                    data-video-url="<%= item.videoUrl || '' %>"
                                    data-display-order="<%= item.displayOrder || 0 %>"
                                    data-is-visible="<%= item.isVisible !== false %>"
                                    data-show-on-homepage="<%= item.showOnHomepage || false %>"
                                    style="flex: 1;">Edit</button>
                                <button class="btn btn-sm btn-danger delete-btn" 
                                    data-id="<%= item.id %>" 
                                    data-confirm="Are you sure you want to delete this item?" 
                                    data-endpoint="/api/gallery/delete/<%= item.id %>"
                                    style="background-color: #dc3545;">Delete</button>
                            </div>
                        </div>
                    </div>
                <% }); %>
            <% } %>
        </div>
    </div>
</div>

<!-- Gallery Edit/Add Modal (hidden by default) -->
<div id="gallery-modal" class="modal" style="display: none;">
    <div class="modal-content">
        <span class="close">&times;</span>
        <h2 id="modal-title">Edit Gallery Item</h2>
        
        <form id="gallery-form" class="admin-form" data-endpoint="/api/gallery/update/0">
            <input type="hidden" id="gallery-id" name="id" value="">
            <input type="hidden" id="gallery-type" name="type" value="image">
            <input type="hidden" id="gallery-display-order" name="displayOrder" value="0">
            
            <div class="form-group">
                <label for="gallery-title">Title</label>
                <input type="text" id="gallery-title" name="title" required>
            </div>
            
            <div class="form-group">
                <label for="gallery-category">Category</label>
                <select id="gallery-category" name="category" required>
                    <option value="Bridal">Bridal</option>
                    <option value="Colors">Colors</option>
                    <option value="Cuts">Cuts</option>
                    <option value="Makeup">Makeup</option>
                    <option value="Textures">Textures</option>
                </select>
            </div>
            
            <div class="form-group">
                <div style="display: flex; gap: 15px; margin-bottom: 15px;">
                    <div style="display: flex; align-items: center;">
                        <input type="checkbox" id="gallery-visible" name="isVisible" checked style="margin-right: 8px;">
                        <label for="gallery-visible">Visible in Lookbook</label>
                    </div>
                    <div style="display: flex; align-items: center;">
                        <input type="checkbox" id="gallery-homepage" name="showOnHomepage" style="margin-right: 8px;">
                        <label for="gallery-homepage">Show on Homepage</label>
                    </div>
                </div>
            </div>
            
            <div class="form-group image-upload">
                <label id="thumbnail-label">Thumbnail Image</label>
                <div class="image-preview" style="margin-bottom: 10px;">
                    <img src="" alt="Preview" style="max-width: 100%; max-height: 200px; display: none;">
                </div>
                <input type="file" accept="image/*" class="form-control">
                <div style="display: flex; gap: 10px; margin-top: 10px;">
                    <button type="button" class="btn upload-btn">Upload</button>
                    <input type="text" id="gallery-image" name="image" class="image-url-input" style="flex: 1;" placeholder="Image URL">
                </div>
                <p class="help-text">Upload an image or provide a URL for the thumbnail. For videos, if left empty, a thumbnail will be auto-generated.</p>
            </div>
            
            <div class="form-group video-url-group" style="display: none;">
                <label for="gallery-video-url">Video File</label>
                <div class="video-preview" style="margin-bottom: 10px; max-width: 100%; max-height: 300px; display: none;">
                    <video id="video-preview" controls preload="metadata" style="max-width: 100%; max-height: 300px;">
                        <source src="" type="video/mp4">
                        Your browser does not support the video tag.
                    </video>
                </div>
                <div class="image-upload">
                    <input type="file" accept="video/*" id="video-file-input" class="form-control">
                    <div style="display: flex; gap: 10px; margin-top: 10px;">
                        <button type="button" class="btn upload-btn" id="video-upload-btn">Upload Video</button>
                        <input type="text" id="gallery-video-url" name="videoUrl" class="image-url-input" style="flex: 1;" placeholder="Video URL">
                    </div>
                    <p class="help-text">Upload a video file (MP4 recommended) or provide a video URL.</p>
                </div>
                <button type="button" class="btn" id="generate-thumbnail-btn" style="margin-top: 10px; background-color: #d4a373;">Generate Thumbnail from Video</button>
                <p id="thumbnail-status" style="margin-top: 10px; display: none;"></p>
            </div>
            
            <div class="actions" style="margin-top: 20px; display: flex; gap: 10px;">
                <button type="button" class="btn btn-secondary close-modal" style="background-color: #6c757d;">Cancel</button>
                <button type="submit" class="btn" id="save-gallery-button">Save</button>
            </div>
        </form>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const modal = document.getElementById('gallery-modal');
        const closeButtons = document.querySelectorAll('.close, .close-modal');
        const addImageBtn = document.getElementById('add-image-btn');
        const addVideoBtn = document.getElementById('add-video-btn');
        const editButtons = document.querySelectorAll('.edit-gallery-btn');
        const galleryForm = document.getElementById('gallery-form');
        const videoUrlGroup = document.querySelector('.video-url-group');
        const thumbnailLabel = document.getElementById('thumbnail-label');
        const videoFileInput = document.getElementById('video-file-input');
        const videoUploadBtn = document.getElementById('video-upload-btn');
        const videoPreview = document.querySelector('.video-preview');
        const videoPlayer = document.getElementById('video-preview');
        const galleryVideoUrlInput = document.getElementById('gallery-video-url');
        const generateThumbnailBtn = document.getElementById('generate-thumbnail-btn');
        const thumbnailPreview = document.querySelector('.image-preview img');
        const thumbnailInput = document.getElementById('gallery-image');
        const thumbnailStatus = document.getElementById('thumbnail-status');
        const saveGalleryButton = document.getElementById('save-gallery-button');
        const categoryFilterButtons = document.querySelectorAll('.category-filter');
        const galleryItems = document.querySelectorAll('.gallery-admin-item');
        const galleryCount = document.getElementById('gallery-count');
        const galleryLoadingIndicator = document.getElementById('gallery-loading');
        const reorderModeBtn = document.getElementById('reorder-mode-btn');
        const saveOrderBtn = document.getElementById('save-order-btn');
        const reorderInstructions = document.getElementById('reorder-instructions');
        const galleryGrid = document.getElementById('gallery-grid');
        
        let editingId = null;
        let isReorderMode = false;
        let itemsCount = galleryGrid.querySelectorAll('.gallery-admin-item').length;
        
        if (galleryCount) {
            galleryCount.textContent = itemsCount;
        }
        
        // Initialize event handlers for visibility and homepage toggles
        initToggleHandlers();
        
        // Filter gallery items by category
        categoryFilterButtons.forEach(filter => {
            filter.addEventListener('click', function() {
                // Update active state
                categoryFilterButtons.forEach(f => f.classList.remove('active'));
                categoryFilterButtons.forEach(f => f.style.backgroundColor = 'transparent');
                categoryFilterButtons.forEach(f => f.style.color = '#333');
                
                this.classList.add('active');
                this.style.backgroundColor = '#9c8370';
                this.style.color = 'white';
                
                const category = this.getAttribute('data-category');
                
                // Filter items
                const items = galleryGrid.querySelectorAll('.gallery-admin-item');
                items.forEach(item => {
                    if (category === 'all' || item.getAttribute('data-category') === category) {
                        item.style.display = '';
                    } else {
                        item.style.display = 'none';
                    }
                });
            });
        });
        
        // Initialize reorder mode
        reorderModeBtn.addEventListener('click', function() {
            toggleReorderMode(!isReorderMode);
        });
        
        // Save the new order
        saveOrderBtn.addEventListener('click', saveGalleryOrder);
        
        // Close modal on close button click
        closeButtons.forEach(button => {
            button.addEventListener('click', function() {
                modal.style.display = 'none';
            });
        });
        
        // Add new image
        addImageBtn.addEventListener('click', function() {
            openGalleryModal('Add New Image', 'image');
        });
        
        // Add new video
        addVideoBtn.addEventListener('click', function() {
            openGalleryModal('Add New Video', 'video');
        });
        
        // Initialize edit buttons
        initEditButtons();
        
        // Initialize delete buttons
        initDeleteButtons();
        
        // Handle form submission
        galleryForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            // Show loading state
            saveGalleryButton.textContent = 'Saving...';
            saveGalleryButton.disabled = true;
            
            // Get form data
            const formData = new FormData(galleryForm);
            const data = Object.fromEntries(formData.entries());
            
            // Convert boolean values from checkboxes
            data.isVisible = !!formData.get('isVisible');
            data.showOnHomepage = !!formData.get('showOnHomepage');
            
            // Determine endpoint
            const endpoint = editingId 
                ? `/api/gallery/update/${editingId}` 
                : '/api/gallery/create';
            
            // Submit form data
            fetch(endpoint, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Reload the page to show changes
                    window.location.reload();
                } else {
                    alert('Error: ' + (data.message || 'Failed to save'));
                    saveGalleryButton.textContent = 'Save';
                    saveGalleryButton.disabled = false;
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error: ' + error.message);
                saveGalleryButton.textContent = 'Save';
                saveGalleryButton.disabled = false;
            });
        });
        
        // Function to initialize visibility and homepage toggle handlers
        function initToggleHandlers() {
            // Visibility toggles
            document.querySelectorAll('.visibility-toggle').forEach(toggle => {
                toggle.addEventListener('click', function() {
                    const galleryItem = this.closest('.gallery-admin-item');
                    const itemId = galleryItem.getAttribute('data-id');
                    const isVisible = this.getAttribute('data-visible') === 'true';
                    
                    // Toggle visibility state
                    const newVisibility = !isVisible;
                    
                    // Update UI immediately for better UX
                    this.setAttribute('data-visible', newVisibility);
                    this.style.backgroundColor = newVisibility ? 'rgba(40, 167, 69, 0.8)' : 'rgba(108, 117, 125, 0.8)';
                    this.innerHTML = newVisibility ? 
                        '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="white" viewBox="0 0 16 16"><path d="M16 8s-3-5.5-8-5.5S0 8 0 8s3 5.5 8 5.5S16 8 16 8zM1.173 8a13.133 13.133 0 0 1 1.66-2.043C4.12 4.668 5.88 3.5 8 3.5c2.12 0 3.879 1.168 5.168 2.457A13.133 13.133 0 0 1 14.828 8c-.058.087-.122.183-.195.288-.335.48-.83 1.12-1.465 1.755C11.879 11.332 10.119 12.5 8 12.5c-2.12 0-3.879-1.168-5.168-2.457A13.134 13.134 0 0 1 1.172 8z"/><path d="M8 5.5a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5zM4.5 8a3.5 3.5 0 1 1 7 0 3.5 3.5 0 0 1-7 0z"/></svg>' : 
                        '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="white" viewBox="0 0 16 16"><path d="M13.359 11.238C15.06 9.72 16 8 16 8s-3-5.5-8-5.5a7.028 7.028 0 0 0-2.79.588l.77.771A5.944 5.944 0 0 1 8 3.5c2.12 0 3.879 1.168 5.168 2.457A13.134 13.134 0 0 1 14.828 8c-.058.087-.122.183-.195.288-.335.48-.83 1.12-1.465 1.755-.165.165-.337.328-.517.486l.708.709z"/><path d="M11.297 9.176a3.5 3.5 0 0 0-4.474-4.474l.823.823a2.5 2.5 0 0 1 2.829 2.829l.822.822zm-2.943 1.299.822.822a3.5 3.5 0 0 1-4.474-4.474l.823.823a2.5 2.5 0 0 0 2.829 2.829z"/><path d="M3.35 5.47c-.18.16-.353.322-.518.487A13.134 13.134 0 0 0 1.172 8l.195.288c.335.48.83 1.12 1.465 1.755C4.121 11.332 5.881 12.5 8 12.5c.716 0 1.39-.133 2.02-.36l.77.772A7.029 7.029 0 0 1 8 13.5C3 13.5 0 8 0 8s.939-1.721 2.641-3.238l.708.709zm10.296 8.884-12-12 .708-.708 12 12-.708.708z"/></svg>';
                    
                    // Update image opacity
                    galleryItem.querySelector('.gallery-admin-image').style.opacity = newVisibility ? 1 : 0.5;
                    
                    // Send update to server
                    fetch(`/api/gallery/update/${itemId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ isVisible: newVisibility })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (!data.success) {
                            // Revert UI if failed
                            console.error('Failed to update visibility');
                            this.setAttribute('data-visible', isVisible);
                            this.style.backgroundColor = isVisible ? 'rgba(40, 167, 69, 0.8)' : 'rgba(108, 117, 125, 0.8)';
                            galleryItem.querySelector('.gallery-admin-image').style.opacity = isVisible ? 1 : 0.5;
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        // Revert UI on error
                        this.setAttribute('data-visible', isVisible);
                        this.style.backgroundColor = isVisible ? 'rgba(40, 167, 69, 0.8)' : 'rgba(108, 117, 125, 0.8)';
                        galleryItem.querySelector('.gallery-admin-image').style.opacity = isVisible ? 1 : 0.5;
                    });
                });
            });
            
            // Homepage toggles
            document.querySelectorAll('.homepage-toggle').forEach(toggle => {
                toggle.addEventListener('click', function() {
                    const galleryItem = this.closest('.gallery-admin-item');
                    const itemId = galleryItem.getAttribute('data-id');
                    const showOnHomepage = this.getAttribute('data-homepage') === 'true';
                    
                    // Toggle homepage state
                    const newHomepageState = !showOnHomepage;
                    
                    // Update UI immediately for better UX
                    this.setAttribute('data-homepage', newHomepageState);
                    this.style.backgroundColor = newHomepageState ? 'rgba(220, 53, 69, 0.8)' : 'rgba(108, 117, 125, 0.8)';
                    this.innerHTML = newHomepageState ? 
                        '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="white" viewBox="0 0 16 16"><path d="M2 2v13.5a.5.5 0 0 0 .74.439L8 13.069l5.26 2.87A.5.5 0 0 0 14 15.5V2a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2z"/></svg>' : 
                        '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="white" viewBox="0 0 16 16"><path d="M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v13.5a.5.5 0 0 1-.777.416L8 13.101l-5.223 2.815A.5.5 0 0 1 2 15.5V2zm2-1a1 1 0 0 0-1 1v12.566l4.723-2.482a.5.5 0 0 1 .554 0L13 14.566V2a1 1 0 0 0-1-1H4z"/></svg>';
                    
                    // Send update to server
                    fetch(`/api/gallery/update/${itemId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ showOnHomepage: newHomepageState })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (!data.success) {
                            // Revert UI if failed
                            console.error('Failed to update homepage visibility');
                            this.setAttribute('data-homepage', showOnHomepage);
                            this.style.backgroundColor = showOnHomepage ? 'rgba(220, 53, 69, 0.8)' : 'rgba(108, 117, 125, 0.8)';
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        // Revert UI on error
                        this.setAttribute('data-homepage', showOnHomepage);
                        this.style.backgroundColor = showOnHomepage ? 'rgba(220, 53, 69, 0.8)' : 'rgba(108, 117, 125, 0.8)';
                    });
                });
            });
        }
        
        // Function to toggle reorder mode
        function toggleReorderMode(enable) {
            isReorderMode = enable;
            
            // Show/hide reorder handles
            const reorderHandles = document.querySelectorAll('.reorder-handle');
            reorderHandles.forEach(handle => {
                handle.style.display = enable ? 'flex' : 'none';
            });
            
            // Show/hide buttons
            reorderModeBtn.style.display = enable ? 'none' : 'block';
            saveOrderBtn.style.display = enable ? 'block' : 'none';
            reorderInstructions.style.display = enable ? 'block' : 'none';
            
            // Enable/disable sorting
            if (enable) {
                initSortable();
            }
        }
        
        // Initialize sortable functionality using Sortable.js library
        function initSortable() {
            // Check if Sortable is available
            if (typeof Sortable !== 'undefined') {
                new Sortable(galleryGrid, {
                    animation: 150,
                    handle: '.reorder-handle',
                    onEnd: function() {
                        // Update the order numbers in the UI
                        updateOrderDisplay();
                    }
                });
            } else {
                // Fallback if Sortable.js is not loaded
                console.error('Sortable.js library is not loaded. Please include it in your HTML.');
                alert('Reordering requires the Sortable.js library. Please add it to your project.');
                toggleReorderMode(false);
            }
        }
        
        // Update display order numbers in the UI
        function updateOrderDisplay() {
            const items = galleryGrid.querySelectorAll('.gallery-admin-item');
            items.forEach((item, index) => {
                item.setAttribute('data-order', index);
                const orderBadge = item.querySelector('.order-badge');
                if (orderBadge) {
                    orderBadge.textContent = '#' + index;
                }
            });
        }
        
        // Save the gallery order
        function saveGalleryOrder() {
            const items = document.querySelectorAll('.gallery-admin-item');
            const updates = [];
            
            items.forEach((item, index) => {
                const itemId = item.getAttribute('data-id');
                console.log(`Reordering: Item ID ${itemId} to position ${index}`);
                updates.push({
                    id: itemId,
                    displayOrder: index
                });
            });
            
            console.log('Updates to send:', updates);
            
            // Show saving state
            saveOrderBtn.textContent = 'Saving...';
            saveOrderBtn.disabled = true;
            
            // Send updates to server
            const promises = updates.map(update => {
                return fetch(`/api/gallery/update/${update.id}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        displayOrder: update.displayOrder
                    })
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    if (!data.success) {
                        console.error(`Failed to update item ${update.id}:`, data.message);
                    }
                    return data.success;
                })
                .catch(error => {
                    console.error(`Error updating item ${update.id}:`, error);
                    return false;
                });
            });
            
            // Wait for all updates to complete
            Promise.all(promises).then(results => {
                const allSuccessful = results.every(success => success);
                
                saveOrderBtn.disabled = false;
                if (allSuccessful) {
                    saveOrderBtn.textContent = 'Order Saved!';
                    
                    // Update the order badges
                    items.forEach((item, index) => {
                        const orderBadge = item.querySelector('.order-badge');
                        if (orderBadge) {
                            orderBadge.textContent = `#${index}`;
                        }
                        item.setAttribute('data-order', index);
                    });
                    
                    // Reload page to ensure the order is reflected
                    setTimeout(() => {
                        window.location.reload();
                    }, 1000);
                } else {
                    saveOrderBtn.textContent = 'Error Saving Order';
                    setTimeout(() => {
                        saveOrderBtn.textContent = 'Try Again';
                    }, 2000);
                }
            });
        }
        
        // Function to open gallery item modal
        function openGalleryModal(title, type, item = null) {
            modal.style.display = 'block';
            modal.querySelector('#modal-title').textContent = title;
            
            // Reset form
            galleryForm.reset();
            
            // Set item type
            document.getElementById('gallery-type').value = type;
            
            // Show/hide video fields based on type
            videoUrlGroup.style.display = type === 'video' ? 'block' : 'none';
            
            // Handle edit case
            if (item) {
                editingId = item.id;
                
                // Set form action
                galleryForm.setAttribute('data-endpoint', `/api/gallery/update/${editingId}`);
                
                // Populate form fields
                document.getElementById('gallery-id').value = editingId;
                document.getElementById('gallery-title').value = item.title;
                document.getElementById('gallery-category').value = item.category;
                document.getElementById('gallery-image').value = item.image;
                document.getElementById('gallery-visible').checked = item.isVisible !== 'false';
                document.getElementById('gallery-homepage').checked = item.showOnHomepage === 'true';
                document.getElementById('gallery-display-order').value = item.displayOrder || 0;
                
                // Show image preview
                const imagePreview = document.querySelector('.image-preview img');
                imagePreview.src = item.image;
                imagePreview.style.display = 'block';
                
                // Handle video type
                if (type === 'video') {
                    document.getElementById('gallery-video-url').value = item.videoUrl;
                    
                    // Show video preview
                    const videoPreview = document.querySelector('.video-preview');
                    const videoElement = document.getElementById('video-preview');
                    videoElement.querySelector('source').src = item.videoUrl;
                    videoElement.load();
                    videoPreview.style.display = 'block';
                }
            } else {
                // Create case
                editingId = null;
                
                // Set form action
                galleryForm.setAttribute('data-endpoint', '/api/gallery/create');
                
                // Clear image preview
                document.querySelector('.image-preview img').style.display = 'none';
                
                // Get maximum current order
                let maxOrder = 0;
                const items = document.querySelectorAll('.gallery-admin-item');
                items.forEach(item => {
                    const order = parseInt(item.getAttribute('data-order') || 0);
                    if (order > maxOrder) maxOrder = order;
                });
                
                // Set new item to be at the end
                document.getElementById('gallery-display-order').value = maxOrder + 1;
                
                // Hide video preview
                document.querySelector('.video-preview').style.display = 'none';
            }
        }
        
        // Initialize edit buttons
        function initEditButtons() {
            document.querySelectorAll('.edit-gallery-btn').forEach(button => {
                button.addEventListener('click', function() {
                    const data = {
                        id: this.getAttribute('data-id'),
                        title: this.getAttribute('data-title'),
                        category: this.getAttribute('data-category'),
                        image: this.getAttribute('data-image'),
                        type: this.getAttribute('data-type'),
                        videoUrl: this.getAttribute('data-video-url'),
                        displayOrder: this.getAttribute('data-display-order'),
                        isVisible: this.getAttribute('data-is-visible'),
                        showOnHomepage: this.getAttribute('data-show-on-homepage')
                    };
                    
                    openGalleryModal(`Edit ${data.type === 'video' ? 'Video' : 'Image'}`, data.type, data);
                });
            });
        }
        
        // Initialize delete buttons
        function initDeleteButtons() {
            document.querySelectorAll('.delete-btn').forEach(button => {
                button.addEventListener('click', function() {
                    const itemId = this.getAttribute('data-id');
                    const endpoint = this.getAttribute('data-endpoint');
                    const confirmMessage = this.getAttribute('data-confirm');
                    
                    if (confirm(confirmMessage)) {
                        // Disable button
                        this.disabled = true;
                        this.textContent = 'Deleting...';
                        
                        // Send delete request
                        fetch(endpoint, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            }
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                // Remove item from grid
                                const item = this.closest('.gallery-admin-item');
                                item.remove();
                                
                                // Update count
                                itemsCount--;
                                if (galleryCount) {
                                    galleryCount.textContent = itemsCount;
                                }
                                
                                // Show empty state if needed
                                if (itemsCount === 0) {
                                    const emptyState = document.createElement('div');
                                    emptyState.className = 'text-center';
                                    emptyState.style.gridColumn = '1 / -1';
                                    emptyState.style.padding = '50px 0';
                                    emptyState.innerHTML = `
                                        <p style="margin-bottom: 20px; color: #6c757d;">No gallery items yet</p>
                                        <p>Get started by adding your first item with the buttons above.</p>
                                    `;
                                    galleryGrid.appendChild(emptyState);
                                }
                            } else {
                                alert('Error: ' + (data.message || 'Failed to delete'));
                                
                                // Re-enable button
                                this.disabled = false;
                                this.textContent = 'Delete';
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            alert('Error: ' + error.message);
                            
                            // Re-enable button
                            this.disabled = false;
                            this.textContent = 'Delete';
                        });
                    }
                });
            });
        }
        
        // Add Sortable.js library if not already loaded
        if (typeof Sortable === 'undefined') {
            const script = document.createElement('script');
            script.src = 'https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js';
            script.onload = function() {
                console.log('Sortable.js loaded successfully');
            };
            script.onerror = function() {
                console.error('Failed to load Sortable.js');
            };
            document.head.appendChild(script);
        }
    });
</script> 
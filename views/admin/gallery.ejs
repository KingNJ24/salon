<!-- Add New Button -->
<div style="margin-bottom: 20px;">
    <button class="btn" id="add-image-btn">Add New Image</button>
    <button class="btn" id="add-video-btn" style="margin-left: 10px; background-color: #d4a373;">Add New Video</button>
</div>

<!-- Gallery Grid -->
<div class="card">
    <div class="card-header">
        <h2>Gallery Items</h2>
    </div>
    <div class="card-body">
        <div class="gallery-admin-grid" style="display: grid; grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); gap: 20px;">
            <% if (gallery.length === 0) { %>
                <div class="text-center" style="grid-column: 1 / -1;">No gallery items yet</div>
            <% } else { %>
                <% gallery.forEach(item => { %>
                    <div class="gallery-admin-item" style="background-color: white; border-radius: 4px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); overflow: hidden;">
                        <div class="gallery-admin-image" style="height: 200px; overflow: hidden; position: relative;">
                            <% if (item.type === 'video') { %>
                                <!-- Video thumbnail with play button indicator -->
                                <div style="position: relative; width: 100%; height: 100%;">
                                    <img src="<%= item.image %>" alt="<%= item.title %>" style="width: 100%; height: 100%; object-fit: cover;" onerror="this.src='/images/placeholder.jpg'">
                                    <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background: rgba(0,0,0,0.5); border-radius: 50%; width: 40px; height: 40px; display: flex; align-items: center; justify-content: center;">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="white">
                                            <path d="M8 5v14l11-7z"/>
                                        </svg>
                                    </div>
                                    <!-- Video preview on hover -->
                                    <video style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; object-fit: cover; opacity: 0; transition: opacity 0.3s ease;" 
                                          onmouseover="this.style.opacity=1; this.play();" 
                                          onmouseout="this.style.opacity=0; this.pause(); this.currentTime=0;" 
                                          muted loop preload="none">
                                        <source src="<%= item.videoUrl %>" type="video/mp4">
                                    </video>
                                    <!-- Video type indicator badge -->
                                    <div style="position: absolute; top: 10px; right: 10px; background: rgba(0,0,0,0.6); color: white; padding: 5px 10px; border-radius: 4px; font-size: 12px;">
                                        Video
                                    </div>
                                </div>
                            <% } else { %>
                                <img src="<%= item.image %>" alt="<%= item.title %>" style="width: 100%; height: 100%; object-fit: cover;" onerror="this.src='/images/placeholder.jpg'">
                            <% } %>
                        </div>
                        <div class="gallery-admin-info" style="padding: 15px;">
                            <h3 style="margin-bottom: 5px;"><%= item.title %></h3>
                            <p style="margin-bottom: 5px; color: #6c757d;"><%= item.category %></p>
                            <% if (item.type === 'video') { %>
                                <p style="margin-bottom: 10px; color: #6c757d; font-size: 0.8em;">Video</p>
                            <% } %>
                            <div class="actions">
                                <button class="btn btn-sm edit-gallery-btn" 
                                    data-id="<%= item.id %>"
                                    data-title="<%= item.title %>"
                                    data-category="<%= item.category %>"
                                    data-image="<%= item.image %>"
                                    data-type="<%= item.type || 'image' %>"
                                    data-video-url="<%= item.videoUrl || '' %>">Edit</button>
                                <button class="btn btn-sm btn-danger delete-btn" data-id="<%= item.id %>" data-confirm="Are you sure you want to delete this item?" data-endpoint="/api/gallery/delete/<%= item.id %>">Delete</button>
                            </div>
                        </div>
                    </div>
                <% }); %>
            <% } %>
        </div>
    </div>
</div>

<!-- Gallery Edit/Add Modal (hidden by default) -->
<div id="gallery-modal" class="modal" style="display: none;">
    <div class="modal-content">
        <span class="close">&times;</span>
        <h2 id="modal-title">Edit Gallery Item</h2>
        
        <form id="gallery-form" class="admin-form" data-endpoint="/api/gallery/update/0">
            <input type="hidden" id="gallery-id" name="id" value="">
            <input type="hidden" id="gallery-type" name="type" value="image">
            
            <div class="form-group">
                <label for="gallery-title">Title</label>
                <input type="text" id="gallery-title" name="title" required>
            </div>
            
            <div class="form-group">
                <label for="gallery-category">Category</label>
                <select id="gallery-category" name="category" required>
                    <option value="Bridal">Bridal</option>
                    <option value="Colors">Colors</option>
                    <option value="Cuts">Cuts</option>
                    <option value="Makeup">Makeup</option>
                    <option value="Textures">Textures</option>
                </select>
            </div>
            
            <div class="form-group image-upload">
                <label id="thumbnail-label">Thumbnail Image</label>
                <div class="image-preview" style="margin-bottom: 10px;">
                    <img src="" alt="Preview" style="max-width: 100%; max-height: 200px; display: none;">
                </div>
                <input type="file" accept="image/*" class="form-control">
                <div style="display: flex; gap: 10px; margin-top: 10px;">
                    <button type="button" class="btn upload-btn">Upload</button>
                    <input type="text" id="gallery-image" name="image" class="image-url-input" style="flex: 1;" placeholder="Image URL">
                </div>
                <p class="help-text">Upload an image or provide a URL for the thumbnail. For videos, if left empty, a thumbnail will be auto-generated.</p>
            </div>
            
            <div class="form-group video-url-group" style="display: none;">
                <label for="gallery-video-url">Video File</label>
                <div class="video-preview" style="margin-bottom: 10px; max-width: 100%; max-height: 300px; display: none;">
                    <video id="video-preview" controls preload="metadata" style="max-width: 100%; max-height: 300px;">
                        <source src="" type="video/mp4">
                        Your browser does not support the video tag.
                    </video>
                </div>
                <div class="image-upload">
                    <input type="file" accept="video/*" id="video-file-input" class="form-control">
                    <div style="display: flex; gap: 10px; margin-top: 10px;">
                        <button type="button" class="btn upload-btn" id="video-upload-btn">Upload Video</button>
                        <input type="text" id="gallery-video-url" name="videoUrl" class="image-url-input" style="flex: 1;" placeholder="Video URL">
                    </div>
                    <p class="help-text">Upload a video file (MP4 recommended) or provide a video URL.</p>
                </div>
                <button type="button" class="btn" id="generate-thumbnail-btn" style="margin-top: 10px; background-color: #d4a373;">Generate Thumbnail from Video</button>
                <p id="thumbnail-status" style="margin-top: 10px; display: none;"></p>
            </div>
            
            <div class="actions">
                <button type="button" class="btn btn-secondary close-modal">Cancel</button>
                <button type="submit" class="btn">Save</button>
            </div>
        </form>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const modal = document.getElementById('gallery-modal');
        const closeButtons = document.querySelectorAll('.close, .close-modal');
        const addImageBtn = document.getElementById('add-image-btn');
        const addVideoBtn = document.getElementById('add-video-btn');
        const editButtons = document.querySelectorAll('.edit-gallery-btn');
        const galleryForm = document.getElementById('gallery-form');
        const videoUrlGroup = document.querySelector('.video-url-group');
        const thumbnailLabel = document.getElementById('thumbnail-label');
        const videoFileInput = document.getElementById('video-file-input');
        const videoUploadBtn = document.getElementById('video-upload-btn');
        const videoPreview = document.querySelector('.video-preview');
        const videoPlayer = document.getElementById('video-preview');
        const galleryVideoUrlInput = document.getElementById('gallery-video-url');
        const generateThumbnailBtn = document.getElementById('generate-thumbnail-btn');
        const thumbnailPreview = document.querySelector('.image-preview img');
        const thumbnailInput = document.getElementById('gallery-image');
        const thumbnailStatus = document.getElementById('thumbnail-status');
        
        // Function to capture video thumbnail
        function captureVideoThumbnail(videoElement, callback) {
            // Check if video is properly loaded
            if (videoElement.readyState < 2) {
                // If not loaded, wait for metadata to load
                videoElement.addEventListener('loadeddata', function onLoaded() {
                    videoElement.removeEventListener('loadeddata', onLoaded);
                    captureFrameAndReturn();
                });
                
                // Make sure video loads
                videoElement.load();
            } else {
                captureFrameAndReturn();
            }
            
            function captureFrameAndReturn() {
                // Go to 1 second into the video (or beginning if shorter)
                const targetTime = Math.min(1, videoElement.duration || 1);
                videoElement.currentTime = targetTime;
                
                videoElement.addEventListener('seeked', function onSeeked() {
                    videoElement.removeEventListener('seeked', onSeeked);
                    
                    try {
                        // Create canvas and draw frame
                        const canvas = document.createElement('canvas');
                        canvas.width = videoElement.videoWidth || 320;
                        canvas.height = videoElement.videoHeight || 240;
                        const ctx = canvas.getContext('2d');
                        ctx.drawImage(videoElement, 0, 0, canvas.width, canvas.height);
                        
                        // Get data URL
                        const dataURL = canvas.toDataURL('image/jpeg', 0.8);
                        
                        // Call back with the data URL
                        callback(dataURL);
                    } catch (err) {
                        console.error('Error capturing video frame:', err);
                        callback(null);
                    }
                });
            }
        }
        
        // Handle form submission with automatic thumbnail generation
        if (galleryForm) {
            galleryForm.addEventListener('submit', function(e) {
                // If this is a video without a thumbnail, generate one automatically
                if (document.getElementById('gallery-type').value === 'video' && 
                    (!thumbnailInput.value || thumbnailInput.value === '') &&
                    (galleryVideoUrlInput.value && galleryVideoUrlInput.value !== '')) {
                    
                    e.preventDefault(); // Prevent form submission temporarily
                    
                    // Show status message
                    if (thumbnailStatus) {
                        thumbnailStatus.textContent = 'Generating thumbnail...';
                        thumbnailStatus.style.display = 'block';
                        thumbnailStatus.style.color = '#000';
                    }
                    
                    // Set video source and attempt to load it
                    if (videoPlayer.src !== galleryVideoUrlInput.value) {
                        videoPlayer.src = galleryVideoUrlInput.value;
                        videoPlayer.load();
                    }
                    
                    // Attempt to generate thumbnail
                    captureVideoThumbnail(videoPlayer, function(dataURL) {
                        if (dataURL) {
                            thumbnailInput.value = dataURL;
                            if (thumbnailPreview) {
                                thumbnailPreview.src = dataURL;
                                thumbnailPreview.style.display = 'block';
                            }
                            
                            if (thumbnailStatus) {
                                thumbnailStatus.textContent = 'Thumbnail generated successfully! Saving...';
                                thumbnailStatus.style.color = '#28a745';
                            }
                            
                            // Submit form after thumbnail generation
                            setTimeout(() => galleryForm.submit(), 800);
                        } else {
                            if (thumbnailStatus) {
                                thumbnailStatus.textContent = 'Could not generate thumbnail. Proceeding anyway...';
                                thumbnailStatus.style.color = '#dc3545';
                            }
                            
                            // Submit form anyway
                            setTimeout(() => galleryForm.submit(), 1000);
                        }
                    });
                }
            });
        }
        
        // Generate thumbnail button click handler
        if (generateThumbnailBtn) {
            generateThumbnailBtn.addEventListener('click', function() {
                if (!videoPlayer.src && galleryVideoUrlInput.value) {
                    videoPlayer.src = galleryVideoUrlInput.value;
                    videoPlayer.load();
                }
                
                if (!videoPlayer.src) {
                    showNotification('Please upload or provide a video URL first', 'error');
                    return;
                }
                
                // Show status message
                if (thumbnailStatus) {
                    thumbnailStatus.textContent = 'Generating thumbnail...';
                    thumbnailStatus.style.display = 'block';
                    thumbnailStatus.style.color = '#000';
                }
                
                // Try to generate thumbnail
                captureVideoThumbnail(videoPlayer, function(dataURL) {
                    if (dataURL) {
                        thumbnailPreview.src = dataURL;
                        thumbnailPreview.style.display = 'block';
                        thumbnailInput.value = dataURL;
                        
                        if (thumbnailStatus) {
                            thumbnailStatus.textContent = 'Thumbnail generated successfully!';
                            thumbnailStatus.style.color = '#28a745';
                        }
                        
                        showNotification('Thumbnail generated successfully', 'success');
                    } else {
                        if (thumbnailStatus) {
                            thumbnailStatus.textContent = 'Failed to generate thumbnail';
                            thumbnailStatus.style.color = '#dc3545';
                        }
                        
                        showNotification('Failed to generate thumbnail', 'error');
                    }
                });
            });
        }
        
        // Setup video preview when URL changes
        if (galleryVideoUrlInput) {
            galleryVideoUrlInput.addEventListener('change', function() {
                if (this.value) {
                    videoPlayer.src = this.value;
                    videoPlayer.load();
                    videoPreview.style.display = 'block';
                } else {
                    videoPreview.style.display = 'none';
                }
            });
        }
        
        // Setup video file upload
        if (videoFileInput && videoUploadBtn) {
            videoFileInput.addEventListener('change', function() {
                if (this.files && this.files[0]) {
                    const file = this.files[0];
                    
                    // Create object URL for preview
                    const videoURL = URL.createObjectURL(file);
                    videoPlayer.src = videoURL;
                    videoPlayer.load();
                    videoPreview.style.display = 'block';
                }
            });
            
            videoUploadBtn.addEventListener('click', function(e) {
                e.preventDefault();
                
                if (!videoFileInput.files || !videoFileInput.files[0]) {
                    showNotification('Please select a video file to upload', 'error');
                    return;
                }
                
                const formData = new FormData();
                formData.append('file', videoFileInput.files[0]);
                
                videoUploadBtn.disabled = true;
                videoUploadBtn.textContent = 'Uploading...';
                
                fetch('/api/upload', {
                    method: 'POST',
                    body: formData,
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`Server returned ${response.status}: ${response.statusText}`);
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        showNotification('Video uploaded successfully', 'success');
                        if (galleryVideoUrlInput) {
                            galleryVideoUrlInput.value = data.filePath;
                        }
                        if (videoPlayer) {
                            videoPlayer.src = data.filePath;
                            videoPlayer.load();
                            if (videoPreview) {
                                videoPreview.style.display = 'block';
                            }
                        }
                        
                        // Auto-generate thumbnail if none exists
                        if ((!thumbnailInput || !thumbnailInput.value || thumbnailInput.value === '') && 
                            generateThumbnailBtn) {
                            // Wait for video to load
                            if (videoPlayer) {
                                videoPlayer.addEventListener('loadeddata', function loadHandler() {
                                    videoPlayer.removeEventListener('loadeddata', loadHandler);
                                    generateThumbnailBtn.click();
                                });
                            }
                        }
                    } else {
                        showNotification('Failed to upload video', 'error');
                    }
                    
                    videoUploadBtn.disabled = false;
                    videoUploadBtn.textContent = 'Upload Video';
                })
                .catch(error => {
                    console.error('Error:', error);
                    showNotification('An error occurred during upload', 'error');
                    videoUploadBtn.disabled = false;
                    videoUploadBtn.textContent = 'Upload Video';
                });
            });
        }
        
        // Show notification
        function showNotification(message, type = 'info') {
            // Create notification element
            const notification = document.createElement('div');
            notification.className = `notification notification-${type}`;
            notification.textContent = message;
            notification.style.position = 'fixed';
            notification.style.top = '20px';
            notification.style.right = '20px';
            notification.style.padding = '12px 20px';
            notification.style.backgroundColor = type === 'success' ? '#d4edda' : type === 'error' ? '#f8d7da' : '#cce5ff';
            notification.style.color = type === 'success' ? '#155724' : type === 'error' ? '#721c24' : '#004085';
            notification.style.borderRadius = '4px';
            notification.style.boxShadow = '0 2px 4px rgba(0,0,0,0.1)';
            notification.style.zIndex = '9999';
            
            // Add to body
            document.body.appendChild(notification);
            
            // Remove after 3 seconds
            setTimeout(() => {
                notification.style.opacity = '0';
                notification.style.transition = 'opacity 0.3s ease';
                
                // Remove from DOM after animation
                setTimeout(() => {
                    notification.remove();
                }, 300);
            }, 3000);
        }
        
        // Open modal for adding a new image
        addImageBtn.addEventListener('click', function() {
            document.getElementById('modal-title').textContent = 'Add New Image';
            galleryForm.reset();
            document.getElementById('gallery-id').value = '';
            document.getElementById('gallery-type').value = 'image';
            galleryForm.setAttribute('data-endpoint', '/api/gallery/create');
            thumbnailLabel.textContent = 'Gallery Image';
            videoUrlGroup.style.display = 'none';
            if (videoPreview) videoPreview.style.display = 'none';
            modal.style.display = 'block';
        });
        
        // Open modal for adding a new video
        addVideoBtn.addEventListener('click', function() {
            document.getElementById('modal-title').textContent = 'Add New Video';
            galleryForm.reset();
            document.getElementById('gallery-id').value = '';
            document.getElementById('gallery-type').value = 'video';
            galleryForm.setAttribute('data-endpoint', '/api/gallery/create');
            thumbnailLabel.textContent = 'Video Thumbnail';
            videoUrlGroup.style.display = 'block';
            if (videoPreview) videoPreview.style.display = 'none';
            modal.style.display = 'block';
        });
        
        // Open modal for editing an item
        editButtons.forEach(button => {
            button.addEventListener('click', function() {
                const itemId = this.getAttribute('data-id');
                const title = this.getAttribute('data-title');
                const category = this.getAttribute('data-category');
                const image = this.getAttribute('data-image');
                const type = this.getAttribute('data-type') || 'image';
                const videoUrl = this.getAttribute('data-video-url') || '';
                
                document.getElementById('modal-title').textContent = type === 'video' ? 'Edit Gallery Video' : 'Edit Gallery Image';
                document.getElementById('gallery-id').value = itemId;
                document.getElementById('gallery-title').value = title;
                document.getElementById('gallery-category').value = category;
                document.getElementById('gallery-image').value = image;
                document.getElementById('gallery-type').value = type;
                
                if (galleryVideoUrlInput) {
                    galleryVideoUrlInput.value = videoUrl;
                }
                
                // Show/hide video URL field based on item type
                if (type === 'video') {
                    thumbnailLabel.textContent = 'Video Thumbnail';
                    videoUrlGroup.style.display = 'block';
                    
                    // Update video preview if available
                    if (videoPlayer && videoUrl) {
                        videoPlayer.src = videoUrl;
                        videoPlayer.load();
                        videoPreview.style.display = 'block';
                    } else if (videoPreview) {
                        videoPreview.style.display = 'none';
                    }
                } else {
                    thumbnailLabel.textContent = 'Gallery Image';
                    videoUrlGroup.style.display = 'none';
                    if (videoPreview) videoPreview.style.display = 'none';
                }
                
                galleryForm.setAttribute('data-endpoint', `/api/gallery/update/${itemId}`);
                modal.style.display = 'block';
            });
        });
        
        // Close modal
        closeButtons.forEach(button => {
            button.addEventListener('click', function() {
                modal.style.display = 'none';
            });
        });
        
        // Close modal when clicking outside
        window.addEventListener('click', function(event) {
            if (event.target === modal) {
                modal.style.display = 'none';
            }
        });
    });
</script> 
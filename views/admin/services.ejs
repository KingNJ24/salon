<!-- Add New Service Button -->
<div style="margin-bottom: 20px;">
    <button class="btn" id="add-service-btn">Add New Service</button>
    <button class="btn" id="add-video-service-btn" style="margin-left: 10px; background-color: #d4a373;">Add Video Service</button>
</div>

<!-- Services Table -->
<div class="card">
    <div class="card-header">
        <h2>All Services</h2>
    </div>
    <div class="card-body">
        <div class="table-container">
            <table>
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Media</th>
                        <th>Name</th>
                        <th>Price</th>
                        <th>Category</th>
                        <th>Description</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% if (services.length === 0) { %>
                        <tr>
                            <td colspan="7" class="text-center">No services yet</td>
                        </tr>
                    <% } else { %>
                        <% services.forEach(service => { %>
                            <tr>
                                <td><%= service.id %></td>
                                <td>
                                    <% if (service.type === 'video') { %>
                                        <div style="position: relative; width: 50px; height: 50px;">
                                            <img src="<%= service.image %>" alt="<%= service.name %>" style="width: 50px; height: 50px; object-fit: cover;" onerror="this.src='/images/placeholder.jpg'">
                                            <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background: rgba(0,0,0,0.5); border-radius: 50%; width: 20px; height: 20px; display: flex; align-items: center; justify-content: center;">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="white">
                                                    <path d="M8 5v14l11-7z"/>
                                                </svg>
                                            </div>
                                        </div>
                                    <% } else { %>
                                        <img src="<%= service.image %>" alt="<%= service.name %>" style="width: 50px; height: 50px; object-fit: cover;" onerror="this.src='/images/placeholder.jpg'">
                                    <% } %>
                                </td>
                                <td><%= service.name %></td>
                                <td><%= service.price %></td>
                                <td><%= service.category %></td>
                                <td><%= service.description.substring(0, 50) + (service.description.length > 50 ? '...' : '') %></td>
                                <td class="actions">
                                    <button class="btn btn-sm edit-service-btn" 
                                        data-id="<%= service.id %>"
                                        data-name="<%= service.name %>"
                                        data-price="<%= service.price %>"
                                        data-category="<%= service.category %>"
                                        data-description="<%= service.description %>"
                                        data-image="<%= service.image %>"
                                        data-type="<%= service.type || 'image' %>"
                                        data-video-url="<%= service.videoUrl || '' %>">Edit</button>
                                    <button class="btn btn-sm btn-danger delete-btn" data-id="<%= service.id %>" data-confirm="Are you sure you want to delete this service?" data-endpoint="/api/service/delete/<%= service.id %>">Delete</button>
                                </td>
                            </tr>
                        <% }); %>
                    <% } %>
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Service Edit/Add Modal (hidden by default) -->
<div id="service-modal" class="modal" style="display: none;">
    <div class="modal-content">
        <span class="close">&times;</span>
        <h2 id="modal-title">Edit Service</h2>
        
        <form id="service-form" class="admin-form" data-endpoint="/api/service/update/0">
            <input type="hidden" id="service-id" name="id" value="">
            <input type="hidden" id="service-type" name="type" value="image">
            
            <div class="form-group">
                <label for="service-name">Service Name</label>
                <input type="text" id="service-name" name="name" required>
            </div>
            
            <div class="form-group">
                <label for="service-price">Price</label>
                <input type="text" id="service-price" name="price" required>
            </div>
            
            <div class="form-group">
                <label for="service-category">Category</label>
                <select id="service-category" name="category" required>
                    <option value="Haircut">Haircut</option>
                    <option value="Coloring">Coloring</option>
                    <option value="Treatment">Treatment</option>
                    <option value="Styling">Styling</option>
                    <option value="Other">Other</option>
                </select>
            </div>
            
            <div class="form-group">
                <label for="service-description">Description</label>
                <textarea id="service-description" name="description" rows="4" required></textarea>
            </div>
            
            <div class="form-group image-upload">
                <label id="thumbnail-label">Service Image</label>
                <div class="image-preview" style="margin-bottom: 10px;">
                    <img src="" alt="Preview" style="max-width: 100%; max-height: 200px; display: none;">
                </div>
                <input type="file" accept="image/*" class="form-control" id="image-file-input">
                <div style="display: flex; gap: 10px; margin-top: 10px;">
                    <button type="button" class="btn upload-btn" id="image-upload-btn">Upload</button>
                    <input type="text" id="service-image" name="image" class="image-url-input" style="flex: 1;" placeholder="Image URL">
                </div>
                <p class="help-text">Upload an image or provide a URL.</p>
            </div>
            
            <div class="form-group video-url-group" style="display: none;">
                <label for="service-video-url">Video File</label>
                <div class="video-preview" style="margin-bottom: 10px; max-width: 100%; max-height: 300px; display: none;">
                    <video id="video-preview" controls preload="metadata" style="max-width: 100%; max-height: 300px;">
                        <source src="" type="video/mp4">
                        Your browser does not support the video tag.
                    </video>
                </div>
                <div class="image-upload">
                    <input type="file" accept="video/*" id="video-file-input" class="form-control">
                    <div style="display: flex; gap: 10px; margin-top: 10px;">
                        <button type="button" class="btn upload-btn" id="video-upload-btn">Upload Video</button>
                        <input type="text" id="service-video-url" name="videoUrl" class="image-url-input" style="flex: 1;" placeholder="Video URL">
                    </div>
                    <p class="help-text">Upload a video file (MP4 recommended) or provide a video URL.</p>
                </div>
                <button type="button" class="btn" id="generate-thumbnail-btn" style="margin-top: 10px; background-color: #d4a373;">Generate Thumbnail from Video</button>
                <p id="thumbnail-status" style="margin-top: 10px; display: none;"></p>
            </div>
            
            <div class="actions">
                <button type="button" class="btn btn-secondary close-modal">Cancel</button>
                <button type="submit" class="btn">Save Service</button>
            </div>
        </form>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const modal = document.getElementById('service-modal');
        const closeButtons = document.querySelectorAll('.close, .close-modal');
        const addServiceBtn = document.getElementById('add-service-btn');
        const addVideoServiceBtn = document.getElementById('add-video-service-btn');
        const editButtons = document.querySelectorAll('.edit-service-btn');
        const serviceForm = document.getElementById('service-form');
        const videoUrlGroup = document.querySelector('.video-url-group');
        const thumbnailLabel = document.getElementById('thumbnail-label');
        const videoFileInput = document.getElementById('video-file-input');
        const videoUploadBtn = document.getElementById('video-upload-btn');
        const videoPreview = document.querySelector('.video-preview');
        const videoPlayer = document.getElementById('video-preview');
        const serviceVideoUrlInput = document.getElementById('service-video-url');
        const generateThumbnailBtn = document.getElementById('generate-thumbnail-btn');
        const thumbnailPreview = document.querySelector('.image-preview img');
        const thumbnailInput = document.getElementById('service-image');
        const thumbnailStatus = document.getElementById('thumbnail-status');
        
        // Function to capture video thumbnail
        function captureVideoThumbnail(videoElement, callback) {
            // Check if video is properly loaded
            if (videoElement.readyState < 2) {
                // If not loaded, wait for metadata to load
                videoElement.addEventListener('loadeddata', function onLoaded() {
                    videoElement.removeEventListener('loadeddata', onLoaded);
                    captureFrameAndReturn();
                });
                
                // Make sure video loads
                videoElement.load();
            } else {
                captureFrameAndReturn();
            }
            
            function captureFrameAndReturn() {
                // Go to 1 second into the video (or beginning if shorter)
                const targetTime = Math.min(1, videoElement.duration || 1);
                videoElement.currentTime = targetTime;
                
                videoElement.addEventListener('seeked', function onSeeked() {
                    videoElement.removeEventListener('seeked', onSeeked);
                    
                    try {
                        // Create canvas and draw frame
                        const canvas = document.createElement('canvas');
                        // Reduce the size to 640px wide maximum (maintaining aspect ratio)
                        const maxWidth = 640;
                        const scaleFactor = maxWidth / (videoElement.videoWidth || 640);
                        canvas.width = Math.min(maxWidth, videoElement.videoWidth || 640);
                        canvas.height = Math.floor((videoElement.videoHeight || 480) * scaleFactor);
                        
                        const ctx = canvas.getContext('2d');
                        ctx.drawImage(videoElement, 0, 0, canvas.width, canvas.height);
                        
                        // Get data URL with reduced quality (0.7 instead of 0.8)
                        const dataURL = canvas.toDataURL('image/jpeg', 0.7);
                        
                        // Call back with the data URL
                        callback(dataURL);
                    } catch (err) {
                        console.error('Error capturing video frame:', err);
                        callback(null);
                    }
                });
            }
        }
        
        // Generate thumbnail button click handler
        if (generateThumbnailBtn) {
            generateThumbnailBtn.addEventListener('click', function() {
                if (!videoPlayer.src && serviceVideoUrlInput.value) {
                    videoPlayer.src = serviceVideoUrlInput.value;
                    videoPlayer.load();
                }
                
                if (!videoPlayer.src) {
                    showNotification('Please upload or provide a video URL first', 'error');
                    return;
                }
                
                // Show status message
                if (thumbnailStatus) {
                    thumbnailStatus.textContent = 'Generating thumbnail...';
                    thumbnailStatus.style.display = 'block';
                    thumbnailStatus.style.color = '#000';
                }
                
                // Try to generate thumbnail
                captureVideoThumbnail(videoPlayer, function(dataURL) {
                    if (dataURL) {
                        thumbnailPreview.src = dataURL;
                        thumbnailPreview.style.display = 'block';
                        thumbnailInput.value = dataURL;
                        
                        if (thumbnailStatus) {
                            thumbnailStatus.textContent = 'Thumbnail generated successfully!';
                            thumbnailStatus.style.color = '#28a745';
                        }
                        
                        showNotification('Thumbnail generated successfully', 'success');
                    } else {
                        if (thumbnailStatus) {
                            thumbnailStatus.textContent = 'Failed to generate thumbnail';
                            thumbnailStatus.style.color = '#dc3545';
                        }
                        
                        showNotification('Failed to generate thumbnail', 'error');
                    }
                });
            });
        }
        
        // Setup video preview when URL changes
        if (serviceVideoUrlInput) {
            serviceVideoUrlInput.addEventListener('change', function() {
                if (this.value) {
                    videoPlayer.src = this.value;
                    videoPlayer.load();
                    videoPreview.style.display = 'block';
                } else {
                    videoPreview.style.display = 'none';
                }
            });
        }
        
        // Setup video file upload
        if (videoFileInput && videoUploadBtn) {
            videoFileInput.addEventListener('change', function() {
                if (this.files && this.files[0]) {
                    const file = this.files[0];
                    
                    // Create object URL for preview
                    const videoURL = URL.createObjectURL(file);
                    videoPlayer.src = videoURL;
                    videoPlayer.load();
                    videoPreview.style.display = 'block';
                }
            });
            
            videoUploadBtn.addEventListener('click', function(e) {
                e.preventDefault();
                
                if (!videoFileInput.files || !videoFileInput.files[0]) {
                    showNotification('Please select a video file to upload', 'error');
                    return;
                }
                
                const formData = new FormData();
                formData.append('file', videoFileInput.files[0]);
                
                videoUploadBtn.disabled = true;
                videoUploadBtn.textContent = 'Uploading...';
                
                fetch('/api/upload', {
                    method: 'POST',
                    body: formData,
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`Server returned ${response.status}: ${response.statusText}`);
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        showNotification('Video uploaded successfully', 'success');
                        if (serviceVideoUrlInput) {
                            serviceVideoUrlInput.value = data.filePath;
                        }
                        
                        // Auto-generate thumbnail if none exists
                        if ((!thumbnailInput || !thumbnailInput.value || thumbnailInput.value === '') && 
                            generateThumbnailBtn) {
                            // Wait for video to load
                            if (videoPlayer) {
                                videoPlayer.addEventListener('loadeddata', function loadHandler() {
                                    videoPlayer.removeEventListener('loadeddata', loadHandler);
                                    generateThumbnailBtn.click();
                                });
                            }
                        }
                    } else {
                        showNotification('Failed to upload video', 'error');
                    }
                    
                    videoUploadBtn.disabled = false;
                    videoUploadBtn.textContent = 'Upload Video';
                })
                .catch(error => {
                    console.error('Error:', error);
                    showNotification('An error occurred during upload', 'error');
                    videoUploadBtn.disabled = false;
                    videoUploadBtn.textContent = 'Upload Video';
                });
            });
        }
        
        // Show notification
        function showNotification(message, type = 'info') {
            // Create notification element
            const notification = document.createElement('div');
            notification.className = `notification notification-${type}`;
            notification.textContent = message;
            notification.style.position = 'fixed';
            notification.style.top = '20px';
            notification.style.right = '20px';
            notification.style.padding = '12px 20px';
            notification.style.backgroundColor = type === 'success' ? '#d4edda' : type === 'error' ? '#f8d7da' : '#cce5ff';
            notification.style.color = type === 'success' ? '#155724' : type === 'error' ? '#721c24' : '#004085';
            notification.style.borderRadius = '4px';
            notification.style.boxShadow = '0 2px 4px rgba(0,0,0,0.1)';
            notification.style.zIndex = '9999';
            
            // Add to body
            document.body.appendChild(notification);
            
            // Remove after 3 seconds
            setTimeout(() => {
                notification.style.opacity = '0';
                notification.style.transition = 'opacity 0.3s ease';
                
                // Remove from DOM after animation
                setTimeout(() => {
                    notification.remove();
                }, 300);
            }, 3000);
        }
        
        // Open modal for adding a new image service
        addServiceBtn.addEventListener('click', function() {
            document.getElementById('modal-title').textContent = 'Add New Service';
            serviceForm.reset();
            document.getElementById('service-id').value = '';
            document.getElementById('service-type').value = 'image';
            serviceForm.setAttribute('data-endpoint', '/api/service/create');
            thumbnailLabel.textContent = 'Service Image';
            videoUrlGroup.style.display = 'none';
            if (videoPreview) videoPreview.style.display = 'none';
            if (thumbnailStatus) thumbnailStatus.style.display = 'none';
            modal.style.display = 'block';
        });
        
        // Open modal for adding a new video service
        addVideoServiceBtn.addEventListener('click', function() {
            document.getElementById('modal-title').textContent = 'Add New Video Service';
            serviceForm.reset();
            document.getElementById('service-id').value = '';
            document.getElementById('service-type').value = 'video';
            serviceForm.setAttribute('data-endpoint', '/api/service/create');
            thumbnailLabel.textContent = 'Video Thumbnail';
            videoUrlGroup.style.display = 'block';
            if (videoPreview) videoPreview.style.display = 'none';
            if (thumbnailStatus) thumbnailStatus.style.display = 'none';
            modal.style.display = 'block';
        });
        
        // Open modal for editing a service
        editButtons.forEach(button => {
            button.addEventListener('click', function() {
                const serviceId = this.getAttribute('data-id');
                const name = this.getAttribute('data-name');
                const price = this.getAttribute('data-price');
                const category = this.getAttribute('data-category');
                const description = this.getAttribute('data-description');
                const image = this.getAttribute('data-image');
                const type = this.getAttribute('data-type') || 'image';
                const videoUrl = this.getAttribute('data-video-url') || '';
                
                // Set form fields
                document.getElementById('modal-title').textContent = 'Edit Service';
                document.getElementById('service-id').value = serviceId;
                document.getElementById('service-name').value = name;
                document.getElementById('service-price').value = price;
                document.getElementById('service-category').value = category;
                document.getElementById('service-description').value = description;
                document.getElementById('service-image').value = image;
                document.getElementById('service-type').value = type;
                
                if (serviceVideoUrlInput) {
                    serviceVideoUrlInput.value = videoUrl;
                }
                
                // Show/hide video URL field based on item type
                if (type === 'video') {
                    thumbnailLabel.textContent = 'Video Thumbnail';
                    videoUrlGroup.style.display = 'block';
                    
                    // Update video preview if available
                    if (videoPlayer && videoUrl) {
                        videoPlayer.src = videoUrl;
                        videoPlayer.load();
                        videoPreview.style.display = 'block';
                    } else if (videoPreview) {
                        videoPreview.style.display = 'none';
                    }
                } else {
                    thumbnailLabel.textContent = 'Service Image';
                    videoUrlGroup.style.display = 'none';
                    if (videoPreview) videoPreview.style.display = 'none';
                }
                
                serviceForm.setAttribute('data-endpoint', `/api/service/update/${serviceId}`);
                if (thumbnailStatus) thumbnailStatus.style.display = 'none';
                modal.style.display = 'block';
            });
        });
        
        // Form submission handler to ensure video thumbnails are generated
        serviceForm.addEventListener('submit', function(e) {
            e.preventDefault(); // Always prevent default form submission to handle manually

            // Create form data for AJAX submission
            const formData = new FormData(serviceForm);
            const endpoint = serviceForm.getAttribute('data-endpoint');
            const jsonData = {};
            
            // Convert form data to JSON and process data URLs carefully
            formData.forEach((value, key) => {
                // Handle image data URLs by truncating them for logging
                if ((key === 'image' || key === 'videoUrl') && value.length > 1000) {
                    console.log(`Processing ${key}, length: ${value.length}`);
                    jsonData[key] = value;
                } else {
                    jsonData[key] = value;
                }
            });
            
            // If this is a video without a thumbnail, generate one automatically
            if (document.getElementById('service-type').value === 'video' && 
                (!thumbnailInput.value || thumbnailInput.value === '') &&
                (serviceVideoUrlInput.value && serviceVideoUrlInput.value !== '')) {
                
                // Show status message
                if (thumbnailStatus) {
                    thumbnailStatus.textContent = 'Generating thumbnail...';
                    thumbnailStatus.style.display = 'block';
                    thumbnailStatus.style.color = '#000';
                }
                
                // Set video source and attempt to load it
                if (videoPlayer.src !== serviceVideoUrlInput.value) {
                    videoPlayer.src = serviceVideoUrlInput.value;
                    videoPlayer.load();
                }
                
                // Attempt to generate thumbnail
                captureVideoThumbnail(videoPlayer, function(dataURL) {
                    if (dataURL) {
                        jsonData.image = dataURL;
                        if (thumbnailStatus) {
                            thumbnailStatus.textContent = 'Thumbnail generated. Saving...';
                            thumbnailStatus.style.color = '#28a745';
                        }
                        
                        // Submit form after thumbnail generation
                        submitFormData(endpoint, jsonData);
                    } else {
                        if (thumbnailStatus) {
                            thumbnailStatus.textContent = 'Could not generate thumbnail. Using default...';
                            thumbnailStatus.style.color = '#dc3545';
                        }
                        
                        // Set default placeholder
                        jsonData.image = '/images/placeholder.jpg';
                        
                        // Submit form anyway
                        submitFormData(endpoint, jsonData);
                    }
                });
            } else {
                // Regular submission without thumbnail generation
                submitFormData(endpoint, jsonData);
            }
        });
        
        // Function to submit form data via AJAX with proper error handling
        function submitFormData(endpoint, jsonData) {
            // Show loading indicator
            const loadingOverlay = document.createElement('div');
            loadingOverlay.style.position = 'fixed';
            loadingOverlay.style.top = '0';
            loadingOverlay.style.left = '0';
            loadingOverlay.style.width = '100%';
            loadingOverlay.style.height = '100%';
            loadingOverlay.style.backgroundColor = 'rgba(0,0,0,0.5)';
            loadingOverlay.style.display = 'flex';
            loadingOverlay.style.alignItems = 'center';
            loadingOverlay.style.justifyContent = 'center';
            loadingOverlay.style.zIndex = '9999';
            loadingOverlay.innerHTML = '<div style="background: white; padding: 20px; border-radius: 5px;">Saving service... Please wait.</div>';
            document.body.appendChild(loadingOverlay);
            
            // Check if the data is too large
            const jsonString = JSON.stringify(jsonData);
            if (jsonString.length > 1024 * 1024 * 5) { // 5MB limit
                // Data is too large, show error
                loadingOverlay.remove();
                showNotification('Data is too large. Try using a smaller image or video.', 'error');
                return;
            }
            
            fetch(endpoint, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: jsonString
            })
            .then(response => {
                if (!response.ok) {
                    if (response.status === 413) {
                        throw new Error('File too large. Try using a smaller image or video.');
                    }
                    return response.text().then(text => {
                        try {
                            // Try to parse as JSON
                            return JSON.parse(text);
                        } catch (e) {
                            // Not JSON, throw the text
                            throw new Error(`Server error: ${text.substring(0, 100)}...`);
                        }
                    });
                }
                return response.json();
            })
            .then(result => {
                loadingOverlay.remove();
                if (result.success) {
                    showNotification('Service saved successfully!', 'success');
                    modal.style.display = 'none';
                    // Reload page after short delay
                    setTimeout(() => window.location.reload(), 1000);
                } else {
                    showNotification(result.message || 'Failed to save service.', 'error');
                }
            })
            .catch(error => {
                loadingOverlay.remove();
                console.error('Error:', error);
                showNotification(error.message || 'An error occurred during saving.', 'error');
            });
        }
        
        // Close modal
        closeButtons.forEach(button => {
            button.addEventListener('click', function() {
                modal.style.display = 'none';
            });
        });
        
        // Close modal when clicking outside
        window.addEventListener('click', function(event) {
            if (event.target === modal) {
                modal.style.display = 'none';
            }
        });
    });
</script> 